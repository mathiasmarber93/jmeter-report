/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10283.0, "series": [{"data": [[0.0, 1417.0], [0.1, 1417.0], [0.2, 1466.0], [0.3, 1466.0], [0.4, 1497.0], [0.5, 1497.0], [0.6, 1497.0], [0.7, 1599.0], [0.8, 1604.0], [0.9, 1604.0], [1.0, 1610.0], [1.1, 1610.0], [1.2, 1626.0], [1.3, 1626.0], [1.4, 1634.0], [1.5, 1634.0], [1.6, 1649.0], [1.7, 1649.0], [1.8, 1664.0], [1.9, 1664.0], [2.0, 1691.0], [2.1, 1691.0], [2.2, 1733.0], [2.3, 1733.0], [2.4, 1763.0], [2.5, 1763.0], [2.6, 1766.0], [2.7, 1766.0], [2.8, 1766.0], [2.9, 1795.0], [3.0, 1795.0], [3.1, 1818.0], [3.2, 1818.0], [3.3, 1853.0], [3.4, 1853.0], [3.5, 1905.0], [3.6, 1905.0], [3.7, 1909.0], [3.8, 1909.0], [3.9, 1911.0], [4.0, 1911.0], [4.1, 2003.0], [4.2, 2003.0], [4.3, 2011.0], [4.4, 2011.0], [4.5, 2016.0], [4.6, 2016.0], [4.7, 2044.0], [4.8, 2044.0], [4.9, 2055.0], [5.0, 2055.0], [5.1, 2071.0], [5.2, 2071.0], [5.3, 2074.0], [5.4, 2074.0], [5.5, 2097.0], [5.6, 2097.0], [5.7, 2105.0], [5.8, 2105.0], [5.9, 2121.0], [6.0, 2121.0], [6.1, 2133.0], [6.2, 2133.0], [6.3, 2154.0], [6.4, 2154.0], [6.5, 2157.0], [6.6, 2157.0], [6.7, 2160.0], [6.8, 2160.0], [6.9, 2162.0], [7.0, 2162.0], [7.1, 2166.0], [7.2, 2166.0], [7.3, 2168.0], [7.4, 2168.0], [7.5, 2221.0], [7.6, 2221.0], [7.7, 2238.0], [7.8, 2238.0], [7.9, 2242.0], [8.0, 2242.0], [8.1, 2246.0], [8.2, 2246.0], [8.3, 2265.0], [8.4, 2265.0], [8.5, 2272.0], [8.6, 2272.0], [8.7, 2280.0], [8.8, 2288.0], [8.9, 2288.0], [9.0, 2295.0], [9.1, 2295.0], [9.2, 2313.0], [9.3, 2313.0], [9.4, 2336.0], [9.5, 2336.0], [9.6, 2343.0], [9.7, 2343.0], [9.8, 2352.0], [9.9, 2352.0], [10.0, 2360.0], [10.1, 2360.0], [10.2, 2363.0], [10.3, 2363.0], [10.4, 2375.0], [10.5, 2375.0], [10.6, 2378.0], [10.7, 2378.0], [10.8, 2408.0], [10.9, 2408.0], [11.0, 2419.0], [11.1, 2419.0], [11.2, 2425.0], [11.3, 2425.0], [11.4, 2429.0], [11.5, 2429.0], [11.6, 2440.0], [11.7, 2440.0], [11.8, 2441.0], [11.9, 2441.0], [12.0, 2448.0], [12.1, 2448.0], [12.2, 2452.0], [12.3, 2452.0], [12.4, 2458.0], [12.5, 2458.0], [12.6, 2459.0], [12.7, 2459.0], [12.8, 2475.0], [12.9, 2475.0], [13.0, 2504.0], [13.1, 2504.0], [13.2, 2511.0], [13.3, 2511.0], [13.4, 2513.0], [13.5, 2513.0], [13.6, 2522.0], [13.7, 2522.0], [13.8, 2524.0], [13.9, 2524.0], [14.0, 2538.0], [14.1, 2538.0], [14.2, 2541.0], [14.3, 2541.0], [14.4, 2544.0], [14.5, 2544.0], [14.6, 2566.0], [14.7, 2566.0], [14.8, 2569.0], [14.9, 2569.0], [15.0, 2577.0], [15.1, 2577.0], [15.2, 2579.0], [15.3, 2579.0], [15.4, 2589.0], [15.5, 2589.0], [15.6, 2602.0], [15.7, 2602.0], [15.8, 2611.0], [15.9, 2611.0], [16.0, 2615.0], [16.1, 2615.0], [16.2, 2625.0], [16.3, 2625.0], [16.4, 2635.0], [16.5, 2635.0], [16.6, 2646.0], [16.7, 2646.0], [16.8, 2651.0], [16.9, 2651.0], [17.0, 2661.0], [17.1, 2661.0], [17.2, 2664.0], [17.3, 2664.0], [17.4, 2673.0], [17.5, 2673.0], [17.6, 2686.0], [17.7, 2686.0], [17.8, 2688.0], [17.9, 2688.0], [18.0, 2692.0], [18.1, 2692.0], [18.2, 2698.0], [18.3, 2698.0], [18.4, 2719.0], [18.5, 2719.0], [18.6, 2753.0], [18.7, 2753.0], [18.8, 2762.0], [18.9, 2762.0], [19.0, 2762.0], [19.1, 2762.0], [19.2, 2765.0], [19.3, 2765.0], [19.4, 2770.0], [19.5, 2770.0], [19.6, 2775.0], [19.7, 2775.0], [19.8, 2778.0], [19.9, 2778.0], [20.0, 2780.0], [20.1, 2780.0], [20.2, 2785.0], [20.3, 2785.0], [20.4, 2803.0], [20.5, 2803.0], [20.6, 2803.0], [20.7, 2803.0], [20.8, 2817.0], [20.9, 2817.0], [21.0, 2817.0], [21.1, 2817.0], [21.2, 2824.0], [21.3, 2824.0], [21.4, 2837.0], [21.5, 2837.0], [21.6, 2838.0], [21.7, 2838.0], [21.8, 2858.0], [21.9, 2858.0], [22.0, 2862.0], [22.1, 2862.0], [22.2, 2868.0], [22.3, 2868.0], [22.4, 2887.0], [22.5, 2887.0], [22.6, 2914.0], [22.7, 2914.0], [22.8, 2917.0], [22.9, 2917.0], [23.0, 2921.0], [23.1, 2921.0], [23.2, 2928.0], [23.3, 2928.0], [23.4, 2943.0], [23.5, 2943.0], [23.6, 2957.0], [23.7, 2957.0], [23.8, 2975.0], [23.9, 2975.0], [24.0, 2981.0], [24.1, 2981.0], [24.2, 2989.0], [24.3, 2989.0], [24.4, 3010.0], [24.5, 3010.0], [24.6, 3011.0], [24.7, 3011.0], [24.8, 3012.0], [24.9, 3012.0], [25.0, 3047.0], [25.1, 3047.0], [25.2, 3051.0], [25.3, 3051.0], [25.4, 3063.0], [25.5, 3063.0], [25.6, 3069.0], [25.7, 3069.0], [25.8, 3091.0], [25.9, 3091.0], [26.0, 3093.0], [26.1, 3093.0], [26.2, 3121.0], [26.3, 3121.0], [26.4, 3127.0], [26.5, 3127.0], [26.6, 3132.0], [26.7, 3132.0], [26.8, 3141.0], [26.9, 3141.0], [27.0, 3177.0], [27.1, 3177.0], [27.2, 3183.0], [27.3, 3183.0], [27.4, 3184.0], [27.5, 3184.0], [27.6, 3193.0], [27.7, 3193.0], [27.8, 3214.0], [27.9, 3214.0], [28.0, 3240.0], [28.1, 3240.0], [28.2, 3304.0], [28.3, 3304.0], [28.4, 3323.0], [28.5, 3323.0], [28.6, 3343.0], [28.7, 3343.0], [28.8, 3345.0], [28.9, 3345.0], [29.0, 3347.0], [29.1, 3347.0], [29.2, 3363.0], [29.3, 3363.0], [29.4, 3377.0], [29.5, 3377.0], [29.6, 3379.0], [29.7, 3379.0], [29.8, 3381.0], [29.9, 3381.0], [30.0, 3393.0], [30.1, 3393.0], [30.2, 3405.0], [30.3, 3405.0], [30.4, 3407.0], [30.5, 3407.0], [30.6, 3427.0], [30.7, 3427.0], [30.8, 3441.0], [30.9, 3441.0], [31.0, 3447.0], [31.1, 3447.0], [31.2, 3449.0], [31.3, 3449.0], [31.4, 3450.0], [31.5, 3450.0], [31.6, 3453.0], [31.7, 3453.0], [31.8, 3467.0], [31.9, 3467.0], [32.0, 3483.0], [32.1, 3483.0], [32.2, 3485.0], [32.3, 3485.0], [32.4, 3490.0], [32.5, 3490.0], [32.6, 3490.0], [32.7, 3490.0], [32.8, 3494.0], [32.9, 3494.0], [33.0, 3519.0], [33.1, 3519.0], [33.2, 3527.0], [33.3, 3527.0], [33.4, 3543.0], [33.5, 3543.0], [33.6, 3561.0], [33.7, 3561.0], [33.8, 3580.0], [33.9, 3580.0], [34.0, 3595.0], [34.1, 3595.0], [34.2, 3597.0], [34.3, 3597.0], [34.4, 3622.0], [34.5, 3622.0], [34.6, 3650.0], [34.7, 3650.0], [34.8, 3662.0], [34.9, 3662.0], [35.0, 3668.0], [35.1, 3668.0], [35.2, 3672.0], [35.3, 3672.0], [35.4, 3678.0], [35.5, 3678.0], [35.6, 3687.0], [35.7, 3687.0], [35.8, 3717.0], [35.9, 3717.0], [36.0, 3720.0], [36.1, 3720.0], [36.2, 3727.0], [36.3, 3727.0], [36.4, 3730.0], [36.5, 3730.0], [36.6, 3733.0], [36.7, 3733.0], [36.8, 3742.0], [36.9, 3742.0], [37.0, 3754.0], [37.1, 3754.0], [37.2, 3764.0], [37.3, 3764.0], [37.4, 3772.0], [37.5, 3772.0], [37.6, 3865.0], [37.7, 3865.0], [37.8, 3866.0], [37.9, 3866.0], [38.0, 3870.0], [38.1, 3870.0], [38.2, 3870.0], [38.3, 3870.0], [38.4, 3884.0], [38.5, 3884.0], [38.6, 3886.0], [38.7, 3886.0], [38.8, 3919.0], [38.9, 3919.0], [39.0, 3923.0], [39.1, 3923.0], [39.2, 3941.0], [39.3, 3941.0], [39.4, 3941.0], [39.5, 3942.0], [39.6, 3942.0], [39.7, 3964.0], [39.8, 3964.0], [39.9, 3994.0], [40.0, 3994.0], [40.1, 4002.0], [40.2, 4002.0], [40.3, 4052.0], [40.4, 4052.0], [40.5, 4052.0], [40.6, 4052.0], [40.7, 4054.0], [40.8, 4054.0], [40.9, 4065.0], [41.0, 4065.0], [41.1, 4074.0], [41.2, 4074.0], [41.3, 4075.0], [41.4, 4075.0], [41.5, 4080.0], [41.6, 4080.0], [41.7, 4095.0], [41.8, 4095.0], [41.9, 4095.0], [42.0, 4095.0], [42.1, 4102.0], [42.2, 4102.0], [42.3, 4110.0], [42.4, 4110.0], [42.5, 4125.0], [42.6, 4125.0], [42.7, 4156.0], [42.8, 4156.0], [42.9, 4174.0], [43.0, 4174.0], [43.1, 4181.0], [43.2, 4181.0], [43.3, 4183.0], [43.4, 4183.0], [43.5, 4195.0], [43.6, 4195.0], [43.7, 4214.0], [43.8, 4214.0], [43.9, 4249.0], [44.0, 4249.0], [44.1, 4277.0], [44.2, 4277.0], [44.3, 4298.0], [44.4, 4298.0], [44.5, 4326.0], [44.6, 4326.0], [44.7, 4359.0], [44.8, 4359.0], [44.9, 4393.0], [45.0, 4393.0], [45.1, 4429.0], [45.2, 4429.0], [45.3, 4441.0], [45.4, 4441.0], [45.5, 4481.0], [45.6, 4481.0], [45.7, 4495.0], [45.8, 4495.0], [45.9, 4495.0], [46.0, 4495.0], [46.1, 4497.0], [46.2, 4497.0], [46.3, 4497.0], [46.4, 4497.0], [46.5, 4500.0], [46.6, 4500.0], [46.7, 4510.0], [46.8, 4510.0], [46.9, 4522.0], [47.0, 4522.0], [47.1, 4527.0], [47.2, 4527.0], [47.3, 4528.0], [47.4, 4528.0], [47.5, 4542.0], [47.6, 4542.0], [47.7, 4544.0], [47.8, 4544.0], [47.9, 4554.0], [48.0, 4554.0], [48.1, 4569.0], [48.2, 4569.0], [48.3, 4572.0], [48.4, 4572.0], [48.5, 4575.0], [48.6, 4575.0], [48.7, 4576.0], [48.8, 4576.0], [48.9, 4581.0], [49.0, 4581.0], [49.1, 4583.0], [49.2, 4583.0], [49.3, 4591.0], [49.4, 4591.0], [49.5, 4604.0], [49.6, 4604.0], [49.7, 4606.0], [49.8, 4606.0], [49.9, 4609.0], [50.0, 4609.0], [50.1, 4612.0], [50.2, 4612.0], [50.3, 4614.0], [50.4, 4614.0], [50.5, 4625.0], [50.6, 4625.0], [50.7, 4654.0], [50.8, 4654.0], [50.9, 4658.0], [51.0, 4658.0], [51.1, 4677.0], [51.2, 4677.0], [51.3, 4689.0], [51.4, 4689.0], [51.5, 4698.0], [51.6, 4698.0], [51.7, 4708.0], [51.8, 4708.0], [51.9, 4716.0], [52.0, 4716.0], [52.1, 4754.0], [52.2, 4754.0], [52.3, 4769.0], [52.4, 4769.0], [52.5, 4772.0], [52.6, 4772.0], [52.7, 4801.0], [52.8, 4801.0], [52.9, 4809.0], [53.0, 4809.0], [53.1, 4815.0], [53.2, 4815.0], [53.3, 4817.0], [53.4, 4817.0], [53.5, 4818.0], [53.6, 4818.0], [53.7, 4842.0], [53.8, 4842.0], [53.9, 4843.0], [54.0, 4843.0], [54.1, 4847.0], [54.2, 4847.0], [54.3, 4891.0], [54.4, 4891.0], [54.5, 4903.0], [54.6, 4903.0], [54.7, 4931.0], [54.8, 4931.0], [54.9, 4932.0], [55.0, 4932.0], [55.1, 4934.0], [55.2, 4934.0], [55.3, 4941.0], [55.4, 4941.0], [55.5, 4947.0], [55.6, 4947.0], [55.7, 4953.0], [55.8, 4953.0], [55.9, 4979.0], [56.0, 4979.0], [56.1, 4986.0], [56.2, 4986.0], [56.3, 4992.0], [56.4, 4992.0], [56.5, 5009.0], [56.6, 5009.0], [56.7, 5027.0], [56.8, 5027.0], [56.9, 5045.0], [57.0, 5045.0], [57.1, 5053.0], [57.2, 5053.0], [57.3, 5067.0], [57.4, 5067.0], [57.5, 5095.0], [57.6, 5095.0], [57.7, 5096.0], [57.8, 5096.0], [57.9, 5099.0], [58.0, 5099.0], [58.1, 5106.0], [58.2, 5106.0], [58.3, 5116.0], [58.4, 5116.0], [58.5, 5116.0], [58.6, 5116.0], [58.7, 5131.0], [58.8, 5131.0], [58.9, 5136.0], [59.0, 5136.0], [59.1, 5153.0], [59.2, 5153.0], [59.3, 5167.0], [59.4, 5167.0], [59.5, 5173.0], [59.6, 5173.0], [59.7, 5175.0], [59.8, 5175.0], [59.9, 5198.0], [60.0, 5198.0], [60.1, 5210.0], [60.2, 5210.0], [60.3, 5210.0], [60.4, 5210.0], [60.5, 5219.0], [60.6, 5219.0], [60.7, 5238.0], [60.8, 5238.0], [60.9, 5239.0], [61.0, 5239.0], [61.1, 5250.0], [61.2, 5250.0], [61.3, 5253.0], [61.4, 5253.0], [61.5, 5253.0], [61.6, 5253.0], [61.7, 5263.0], [61.8, 5263.0], [61.9, 5275.0], [62.0, 5275.0], [62.1, 5299.0], [62.2, 5299.0], [62.3, 5303.0], [62.4, 5303.0], [62.5, 5328.0], [62.6, 5328.0], [62.7, 5329.0], [62.8, 5329.0], [62.9, 5339.0], [63.0, 5339.0], [63.1, 5360.0], [63.2, 5360.0], [63.3, 5364.0], [63.4, 5364.0], [63.5, 5370.0], [63.6, 5370.0], [63.7, 5382.0], [63.8, 5382.0], [63.9, 5399.0], [64.0, 5399.0], [64.1, 5413.0], [64.2, 5413.0], [64.3, 5415.0], [64.4, 5415.0], [64.5, 5465.0], [64.6, 5465.0], [64.7, 5480.0], [64.8, 5480.0], [64.9, 5491.0], [65.0, 5491.0], [65.1, 5495.0], [65.2, 5495.0], [65.3, 5498.0], [65.4, 5498.0], [65.5, 5514.0], [65.6, 5514.0], [65.7, 5560.0], [65.8, 5560.0], [65.9, 5571.0], [66.0, 5571.0], [66.1, 5578.0], [66.2, 5578.0], [66.3, 5591.0], [66.4, 5591.0], [66.5, 5596.0], [66.6, 5596.0], [66.7, 5600.0], [66.8, 5600.0], [66.9, 5659.0], [67.0, 5659.0], [67.1, 5671.0], [67.2, 5671.0], [67.3, 5694.0], [67.4, 5694.0], [67.5, 5713.0], [67.6, 5713.0], [67.7, 5717.0], [67.8, 5717.0], [67.9, 5719.0], [68.0, 5719.0], [68.1, 5724.0], [68.2, 5724.0], [68.3, 5726.0], [68.4, 5726.0], [68.5, 5762.0], [68.6, 5762.0], [68.7, 5767.0], [68.8, 5767.0], [68.9, 5805.0], [69.0, 5805.0], [69.1, 5812.0], [69.2, 5812.0], [69.3, 5817.0], [69.4, 5817.0], [69.5, 5821.0], [69.6, 5821.0], [69.7, 5857.0], [69.8, 5857.0], [69.9, 5860.0], [70.0, 5860.0], [70.1, 5869.0], [70.2, 5869.0], [70.3, 5906.0], [70.4, 5906.0], [70.5, 5910.0], [70.6, 5910.0], [70.7, 5912.0], [70.8, 5912.0], [70.9, 5950.0], [71.0, 5950.0], [71.1, 5952.0], [71.2, 5952.0], [71.3, 5957.0], [71.4, 5957.0], [71.5, 6005.0], [71.6, 6005.0], [71.7, 6029.0], [71.8, 6029.0], [71.9, 6042.0], [72.0, 6042.0], [72.1, 6044.0], [72.2, 6044.0], [72.3, 6053.0], [72.4, 6053.0], [72.5, 6067.0], [72.6, 6067.0], [72.7, 6075.0], [72.8, 6075.0], [72.9, 6079.0], [73.0, 6079.0], [73.1, 6087.0], [73.2, 6087.0], [73.3, 6099.0], [73.4, 6099.0], [73.5, 6108.0], [73.6, 6108.0], [73.7, 6110.0], [73.8, 6110.0], [73.9, 6135.0], [74.0, 6135.0], [74.1, 6143.0], [74.2, 6143.0], [74.3, 6162.0], [74.4, 6162.0], [74.5, 6167.0], [74.6, 6167.0], [74.7, 6169.0], [74.8, 6169.0], [74.9, 6183.0], [75.0, 6183.0], [75.1, 6189.0], [75.2, 6189.0], [75.3, 6224.0], [75.4, 6224.0], [75.5, 6227.0], [75.6, 6227.0], [75.7, 6228.0], [75.8, 6228.0], [75.9, 6260.0], [76.0, 6260.0], [76.1, 6262.0], [76.2, 6262.0], [76.3, 6263.0], [76.4, 6263.0], [76.5, 6269.0], [76.6, 6269.0], [76.7, 6275.0], [76.8, 6275.0], [76.9, 6275.0], [77.0, 6275.0], [77.1, 6282.0], [77.2, 6282.0], [77.3, 6287.0], [77.4, 6287.0], [77.5, 6304.0], [77.6, 6304.0], [77.7, 6305.0], [77.8, 6305.0], [77.9, 6323.0], [78.0, 6323.0], [78.1, 6324.0], [78.2, 6324.0], [78.3, 6333.0], [78.4, 6333.0], [78.5, 6345.0], [78.6, 6345.0], [78.7, 6346.0], [78.8, 6346.0], [78.9, 6357.0], [79.0, 6357.0], [79.1, 6357.0], [79.2, 6357.0], [79.3, 6368.0], [79.4, 6368.0], [79.5, 6387.0], [79.6, 6387.0], [79.7, 6431.0], [79.8, 6431.0], [79.9, 6439.0], [80.0, 6439.0], [80.1, 6448.0], [80.2, 6448.0], [80.3, 6452.0], [80.4, 6452.0], [80.5, 6453.0], [80.6, 6453.0], [80.7, 6465.0], [80.8, 6465.0], [80.9, 6470.0], [81.0, 6470.0], [81.1, 6482.0], [81.2, 6482.0], [81.3, 6494.0], [81.4, 6494.0], [81.5, 6501.0], [81.6, 6501.0], [81.7, 6501.0], [81.8, 6501.0], [81.9, 6507.0], [82.0, 6507.0], [82.1, 6510.0], [82.2, 6510.0], [82.3, 6520.0], [82.4, 6520.0], [82.5, 6548.0], [82.6, 6548.0], [82.7, 6583.0], [82.8, 6583.0], [82.9, 6583.0], [83.0, 6583.0], [83.1, 6590.0], [83.2, 6590.0], [83.3, 6592.0], [83.4, 6592.0], [83.5, 6636.0], [83.6, 6636.0], [83.7, 6648.0], [83.8, 6648.0], [83.9, 6662.0], [84.0, 6662.0], [84.1, 6677.0], [84.2, 6677.0], [84.3, 6678.0], [84.4, 6678.0], [84.5, 6692.0], [84.6, 6692.0], [84.7, 6698.0], [84.8, 6698.0], [84.9, 6721.0], [85.0, 6721.0], [85.1, 6726.0], [85.2, 6726.0], [85.3, 6740.0], [85.4, 6740.0], [85.5, 6742.0], [85.6, 6742.0], [85.7, 6744.0], [85.8, 6744.0], [85.9, 6745.0], [86.0, 6745.0], [86.1, 6782.0], [86.2, 6782.0], [86.3, 6783.0], [86.4, 6783.0], [86.5, 6787.0], [86.6, 6787.0], [86.7, 6787.0], [86.8, 6787.0], [86.9, 6834.0], [87.0, 6834.0], [87.1, 6872.0], [87.2, 6872.0], [87.3, 6889.0], [87.4, 6889.0], [87.5, 6908.0], [87.6, 6908.0], [87.7, 6936.0], [87.8, 6936.0], [87.9, 6956.0], [88.0, 6956.0], [88.1, 6956.0], [88.2, 6956.0], [88.3, 6962.0], [88.4, 6962.0], [88.5, 6966.0], [88.6, 6966.0], [88.7, 6969.0], [88.8, 6969.0], [88.9, 6969.0], [89.0, 6969.0], [89.1, 6973.0], [89.2, 6973.0], [89.3, 6986.0], [89.4, 6986.0], [89.5, 6993.0], [89.6, 6993.0], [89.7, 7008.0], [89.8, 7008.0], [89.9, 7027.0], [90.0, 7027.0], [90.1, 7050.0], [90.2, 7050.0], [90.3, 7080.0], [90.4, 7080.0], [90.5, 7090.0], [90.6, 7090.0], [90.7, 7090.0], [90.8, 7090.0], [90.9, 7133.0], [91.0, 7133.0], [91.1, 7163.0], [91.2, 7163.0], [91.3, 7172.0], [91.4, 7172.0], [91.5, 7173.0], [91.6, 7173.0], [91.7, 7229.0], [91.8, 7229.0], [91.9, 7240.0], [92.0, 7240.0], [92.1, 7254.0], [92.2, 7254.0], [92.3, 7293.0], [92.4, 7293.0], [92.5, 7303.0], [92.6, 7303.0], [92.7, 7318.0], [92.8, 7318.0], [92.9, 7325.0], [93.0, 7325.0], [93.1, 7325.0], [93.2, 7325.0], [93.3, 7334.0], [93.4, 7334.0], [93.5, 7353.0], [93.6, 7353.0], [93.7, 7356.0], [93.8, 7356.0], [93.9, 7403.0], [94.0, 7403.0], [94.1, 7404.0], [94.2, 7404.0], [94.3, 7432.0], [94.4, 7432.0], [94.5, 7464.0], [94.6, 7464.0], [94.7, 7469.0], [94.8, 7469.0], [94.9, 7527.0], [95.0, 7527.0], [95.1, 7533.0], [95.2, 7533.0], [95.3, 7541.0], [95.4, 7541.0], [95.5, 7543.0], [95.6, 7543.0], [95.7, 7557.0], [95.8, 7557.0], [95.9, 7607.0], [96.0, 7607.0], [96.1, 7616.0], [96.2, 7616.0], [96.3, 7624.0], [96.4, 7624.0], [96.5, 7637.0], [96.6, 7637.0], [96.7, 7674.0], [96.8, 7674.0], [96.9, 7677.0], [97.0, 7677.0], [97.1, 7692.0], [97.2, 7692.0], [97.3, 7716.0], [97.4, 7716.0], [97.5, 7735.0], [97.6, 7735.0], [97.7, 7836.0], [97.8, 7836.0], [97.9, 7859.0], [98.0, 7859.0], [98.1, 7870.0], [98.2, 7870.0], [98.3, 7973.0], [98.4, 7973.0], [98.5, 8016.0], [98.6, 8016.0], [98.7, 8274.0], [98.8, 8274.0], [98.9, 8311.0], [99.0, 8311.0], [99.1, 8371.0], [99.2, 8371.0], [99.3, 8373.0], [99.4, 8373.0], [99.5, 8661.0], [99.6, 8661.0], [99.7, 9547.0], [99.8, 9547.0], [99.9, 10283.0], [100.0, 10283.0]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 137.0], [0.7, 137.0], [0.8, 138.0], [0.9, 138.0], [1.0, 139.0], [1.1, 139.0], [1.2, 140.0], [1.3, 140.0], [1.4, 143.0], [1.5, 143.0], [1.6, 144.0], [1.7, 144.0], [1.8, 145.0], [1.9, 145.0], [2.0, 153.0], [2.1, 153.0], [2.2, 154.0], [2.3, 154.0], [2.4, 154.0], [2.5, 154.0], [2.6, 158.0], [2.7, 158.0], [2.8, 158.0], [2.9, 158.0], [3.0, 159.0], [3.1, 159.0], [3.2, 162.0], [3.3, 162.0], [3.4, 164.0], [3.5, 164.0], [3.6, 168.0], [3.7, 168.0], [3.8, 168.0], [3.9, 169.0], [4.0, 169.0], [4.1, 169.0], [4.2, 170.0], [4.3, 170.0], [4.4, 172.0], [4.5, 172.0], [4.6, 172.0], [4.7, 173.0], [4.8, 173.0], [4.9, 174.0], [5.0, 174.0], [5.1, 177.0], [5.2, 177.0], [5.3, 179.0], [5.4, 179.0], [5.5, 181.0], [5.6, 181.0], [5.7, 181.0], [5.8, 181.0], [5.9, 183.0], [6.0, 183.0], [6.1, 186.0], [6.2, 186.0], [6.3, 187.0], [6.4, 187.0], [6.5, 187.0], [6.6, 187.0], [6.7, 188.0], [6.8, 188.0], [6.9, 193.0], [7.0, 193.0], [7.1, 196.0], [7.2, 196.0], [7.3, 196.0], [7.4, 196.0], [7.5, 197.0], [7.6, 197.0], [7.7, 197.0], [7.8, 197.0], [7.9, 198.0], [8.0, 198.0], [8.1, 199.0], [8.2, 199.0], [8.3, 204.0], [8.4, 204.0], [8.5, 204.0], [8.6, 204.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 206.0], [9.2, 206.0], [9.3, 207.0], [9.4, 207.0], [9.5, 207.0], [9.6, 207.0], [9.7, 208.0], [9.8, 208.0], [9.9, 210.0], [10.0, 210.0], [10.1, 210.0], [10.2, 210.0], [10.3, 210.0], [10.4, 210.0], [10.5, 213.0], [10.6, 213.0], [10.7, 213.0], [10.8, 213.0], [10.9, 213.0], [11.0, 213.0], [11.1, 215.0], [11.2, 215.0], [11.3, 216.0], [11.4, 217.0], [11.5, 217.0], [11.6, 217.0], [11.7, 217.0], [11.8, 220.0], [11.9, 220.0], [12.0, 221.0], [12.1, 221.0], [12.2, 223.0], [12.3, 223.0], [12.4, 224.0], [12.5, 224.0], [12.6, 226.0], [12.7, 226.0], [12.8, 226.0], [12.9, 226.0], [13.0, 226.0], [13.1, 226.0], [13.2, 227.0], [13.3, 227.0], [13.4, 228.0], [13.5, 228.0], [13.6, 230.0], [13.7, 230.0], [13.8, 232.0], [13.9, 232.0], [14.0, 235.0], [14.1, 235.0], [14.2, 237.0], [14.3, 237.0], [14.4, 240.0], [14.5, 240.0], [14.6, 242.0], [14.7, 242.0], [14.8, 243.0], [14.9, 243.0], [15.0, 243.0], [15.1, 243.0], [15.2, 244.0], [15.3, 244.0], [15.4, 246.0], [15.5, 246.0], [15.6, 248.0], [15.7, 248.0], [15.8, 249.0], [15.9, 249.0], [16.0, 251.0], [16.1, 251.0], [16.2, 252.0], [16.3, 252.0], [16.4, 254.0], [16.5, 254.0], [16.6, 255.0], [16.7, 255.0], [16.8, 257.0], [16.9, 257.0], [17.0, 257.0], [17.1, 257.0], [17.2, 259.0], [17.3, 259.0], [17.4, 260.0], [17.5, 260.0], [17.6, 261.0], [17.7, 261.0], [17.8, 261.0], [17.9, 261.0], [18.0, 262.0], [18.1, 262.0], [18.2, 263.0], [18.3, 263.0], [18.4, 265.0], [18.5, 265.0], [18.6, 266.0], [18.7, 266.0], [18.8, 266.0], [18.9, 266.0], [19.0, 267.0], [19.1, 267.0], [19.2, 267.0], [19.3, 267.0], [19.4, 267.0], [19.5, 267.0], [19.6, 268.0], [19.7, 268.0], [19.8, 268.0], [19.9, 268.0], [20.0, 270.0], [20.1, 270.0], [20.2, 270.0], [20.3, 270.0], [20.4, 271.0], [20.5, 271.0], [20.6, 276.0], [20.7, 276.0], [20.8, 277.0], [20.9, 277.0], [21.0, 278.0], [21.1, 278.0], [21.2, 281.0], [21.3, 281.0], [21.4, 283.0], [21.5, 283.0], [21.6, 287.0], [21.7, 287.0], [21.8, 289.0], [21.9, 289.0], [22.0, 292.0], [22.1, 292.0], [22.2, 292.0], [22.3, 292.0], [22.4, 293.0], [22.5, 293.0], [22.6, 295.0], [22.7, 295.0], [22.8, 296.0], [22.9, 296.0], [23.0, 300.0], [23.1, 300.0], [23.2, 301.0], [23.3, 301.0], [23.4, 302.0], [23.5, 302.0], [23.6, 304.0], [23.7, 304.0], [23.8, 304.0], [23.9, 304.0], [24.0, 305.0], [24.1, 305.0], [24.2, 307.0], [24.3, 307.0], [24.4, 310.0], [24.5, 310.0], [24.6, 312.0], [24.7, 312.0], [24.8, 313.0], [24.9, 313.0], [25.0, 316.0], [25.1, 316.0], [25.2, 320.0], [25.3, 320.0], [25.4, 321.0], [25.5, 321.0], [25.6, 324.0], [25.7, 324.0], [25.8, 324.0], [25.9, 324.0], [26.0, 328.0], [26.1, 328.0], [26.2, 331.0], [26.3, 331.0], [26.4, 331.0], [26.5, 331.0], [26.6, 333.0], [26.7, 333.0], [26.8, 335.0], [26.9, 335.0], [27.0, 335.0], [27.1, 335.0], [27.2, 337.0], [27.3, 337.0], [27.4, 338.0], [27.5, 338.0], [27.6, 341.0], [27.7, 341.0], [27.8, 342.0], [27.9, 342.0], [28.0, 343.0], [28.1, 343.0], [28.2, 343.0], [28.3, 343.0], [28.4, 346.0], [28.5, 346.0], [28.6, 348.0], [28.7, 348.0], [28.8, 350.0], [28.9, 350.0], [29.0, 354.0], [29.1, 354.0], [29.2, 354.0], [29.3, 354.0], [29.4, 361.0], [29.5, 361.0], [29.6, 363.0], [29.7, 363.0], [29.8, 364.0], [29.9, 364.0], [30.0, 364.0], [30.1, 364.0], [30.2, 368.0], [30.3, 368.0], [30.4, 369.0], [30.5, 369.0], [30.6, 372.0], [30.7, 372.0], [30.8, 373.0], [30.9, 373.0], [31.0, 374.0], [31.1, 374.0], [31.2, 376.0], [31.3, 376.0], [31.4, 378.0], [31.5, 378.0], [31.6, 379.0], [31.7, 379.0], [31.8, 381.0], [31.9, 381.0], [32.0, 388.0], [32.1, 388.0], [32.2, 398.0], [32.3, 398.0], [32.4, 399.0], [32.5, 399.0], [32.6, 400.0], [32.7, 400.0], [32.8, 400.0], [32.9, 400.0], [33.0, 400.0], [33.1, 400.0], [33.2, 402.0], [33.3, 402.0], [33.4, 402.0], [33.5, 402.0], [33.6, 404.0], [33.7, 404.0], [33.8, 405.0], [33.9, 405.0], [34.0, 405.0], [34.1, 405.0], [34.2, 406.0], [34.3, 406.0], [34.4, 407.0], [34.5, 407.0], [34.6, 408.0], [34.7, 408.0], [34.8, 410.0], [34.9, 410.0], [35.0, 411.0], [35.1, 411.0], [35.2, 412.0], [35.3, 412.0], [35.4, 413.0], [35.5, 413.0], [35.6, 414.0], [35.7, 414.0], [35.8, 414.0], [35.9, 414.0], [36.0, 416.0], [36.1, 416.0], [36.2, 417.0], [36.3, 417.0], [36.4, 417.0], [36.5, 417.0], [36.6, 418.0], [36.7, 418.0], [36.8, 419.0], [36.9, 419.0], [37.0, 420.0], [37.1, 420.0], [37.2, 421.0], [37.3, 421.0], [37.4, 421.0], [37.5, 421.0], [37.6, 425.0], [37.7, 425.0], [37.8, 426.0], [37.9, 426.0], [38.0, 429.0], [38.1, 429.0], [38.2, 429.0], [38.3, 429.0], [38.4, 431.0], [38.5, 431.0], [38.6, 431.0], [38.7, 431.0], [38.8, 432.0], [38.9, 432.0], [39.0, 434.0], [39.1, 434.0], [39.2, 435.0], [39.3, 435.0], [39.4, 437.0], [39.5, 437.0], [39.6, 438.0], [39.7, 438.0], [39.8, 438.0], [39.9, 438.0], [40.0, 438.0], [40.1, 438.0], [40.2, 441.0], [40.3, 441.0], [40.4, 443.0], [40.5, 443.0], [40.6, 446.0], [40.7, 446.0], [40.8, 446.0], [40.9, 446.0], [41.0, 447.0], [41.1, 447.0], [41.2, 447.0], [41.3, 447.0], [41.4, 447.0], [41.5, 447.0], [41.6, 448.0], [41.7, 448.0], [41.8, 449.0], [41.9, 449.0], [42.0, 450.0], [42.1, 450.0], [42.2, 450.0], [42.3, 450.0], [42.4, 452.0], [42.5, 452.0], [42.6, 452.0], [42.7, 452.0], [42.8, 452.0], [42.9, 452.0], [43.0, 453.0], [43.1, 453.0], [43.2, 453.0], [43.3, 453.0], [43.4, 454.0], [43.5, 454.0], [43.6, 455.0], [43.7, 455.0], [43.8, 455.0], [43.9, 457.0], [44.0, 457.0], [44.1, 458.0], [44.2, 458.0], [44.3, 458.0], [44.4, 458.0], [44.5, 459.0], [44.6, 459.0], [44.7, 462.0], [44.8, 462.0], [44.9, 463.0], [45.0, 463.0], [45.1, 465.0], [45.2, 465.0], [45.3, 465.0], [45.4, 465.0], [45.5, 465.0], [45.6, 465.0], [45.7, 467.0], [45.8, 467.0], [45.9, 468.0], [46.0, 468.0], [46.1, 468.0], [46.2, 468.0], [46.3, 469.0], [46.4, 469.0], [46.5, 470.0], [46.6, 470.0], [46.7, 471.0], [46.8, 471.0], [46.9, 472.0], [47.0, 472.0], [47.1, 473.0], [47.2, 473.0], [47.3, 475.0], [47.4, 475.0], [47.5, 476.0], [47.6, 476.0], [47.7, 477.0], [47.8, 477.0], [47.9, 478.0], [48.0, 478.0], [48.1, 480.0], [48.2, 480.0], [48.3, 482.0], [48.4, 482.0], [48.5, 482.0], [48.6, 482.0], [48.7, 483.0], [48.8, 483.0], [48.9, 483.0], [49.0, 483.0], [49.1, 485.0], [49.2, 485.0], [49.3, 485.0], [49.4, 485.0], [49.5, 488.0], [49.6, 488.0], [49.7, 489.0], [49.8, 489.0], [49.9, 491.0], [50.0, 491.0], [50.1, 493.0], [50.2, 493.0], [50.3, 494.0], [50.4, 494.0], [50.5, 496.0], [50.6, 496.0], [50.7, 496.0], [50.8, 496.0], [50.9, 498.0], [51.0, 498.0], [51.1, 502.0], [51.2, 502.0], [51.3, 506.0], [51.4, 506.0], [51.5, 507.0], [51.6, 507.0], [51.7, 508.0], [51.8, 508.0], [51.9, 509.0], [52.0, 509.0], [52.1, 510.0], [52.2, 510.0], [52.3, 510.0], [52.4, 510.0], [52.5, 511.0], [52.6, 511.0], [52.7, 512.0], [52.8, 512.0], [52.9, 512.0], [53.0, 512.0], [53.1, 512.0], [53.2, 512.0], [53.3, 514.0], [53.4, 514.0], [53.5, 514.0], [53.6, 514.0], [53.7, 519.0], [53.8, 519.0], [53.9, 526.0], [54.0, 526.0], [54.1, 527.0], [54.2, 527.0], [54.3, 527.0], [54.4, 527.0], [54.5, 527.0], [54.6, 527.0], [54.7, 528.0], [54.8, 528.0], [54.9, 531.0], [55.0, 531.0], [55.1, 531.0], [55.2, 531.0], [55.3, 532.0], [55.4, 532.0], [55.5, 534.0], [55.6, 534.0], [55.7, 538.0], [55.8, 538.0], [55.9, 538.0], [56.0, 538.0], [56.1, 538.0], [56.2, 538.0], [56.3, 539.0], [56.4, 539.0], [56.5, 539.0], [56.6, 539.0], [56.7, 541.0], [56.8, 541.0], [56.9, 547.0], [57.0, 547.0], [57.1, 548.0], [57.2, 548.0], [57.3, 549.0], [57.4, 549.0], [57.5, 554.0], [57.6, 554.0], [57.7, 555.0], [57.8, 555.0], [57.9, 555.0], [58.0, 555.0], [58.1, 557.0], [58.2, 557.0], [58.3, 564.0], [58.4, 564.0], [58.5, 565.0], [58.6, 565.0], [58.7, 569.0], [58.8, 569.0], [58.9, 571.0], [59.0, 571.0], [59.1, 574.0], [59.2, 574.0], [59.3, 578.0], [59.4, 578.0], [59.5, 579.0], [59.6, 579.0], [59.7, 579.0], [59.8, 579.0], [59.9, 580.0], [60.0, 580.0], [60.1, 583.0], [60.2, 583.0], [60.3, 589.0], [60.4, 589.0], [60.5, 594.0], [60.6, 594.0], [60.7, 595.0], [60.8, 595.0], [60.9, 596.0], [61.0, 596.0], [61.1, 596.0], [61.2, 596.0], [61.3, 600.0], [61.4, 600.0], [61.5, 605.0], [61.6, 605.0], [61.7, 607.0], [61.8, 607.0], [61.9, 608.0], [62.0, 608.0], [62.1, 610.0], [62.2, 610.0], [62.3, 610.0], [62.4, 610.0], [62.5, 610.0], [62.6, 610.0], [62.7, 611.0], [62.8, 611.0], [62.9, 611.0], [63.0, 611.0], [63.1, 617.0], [63.2, 617.0], [63.3, 620.0], [63.4, 620.0], [63.5, 621.0], [63.6, 621.0], [63.7, 622.0], [63.8, 622.0], [63.9, 622.0], [64.0, 622.0], [64.1, 625.0], [64.2, 625.0], [64.3, 625.0], [64.4, 625.0], [64.5, 627.0], [64.6, 627.0], [64.7, 632.0], [64.8, 632.0], [64.9, 633.0], [65.0, 633.0], [65.1, 635.0], [65.2, 635.0], [65.3, 639.0], [65.4, 639.0], [65.5, 640.0], [65.6, 640.0], [65.7, 641.0], [65.8, 641.0], [65.9, 641.0], [66.0, 641.0], [66.1, 644.0], [66.2, 644.0], [66.3, 646.0], [66.4, 646.0], [66.5, 657.0], [66.6, 657.0], [66.7, 658.0], [66.8, 658.0], [66.9, 658.0], [67.0, 658.0], [67.1, 659.0], [67.2, 659.0], [67.3, 660.0], [67.4, 660.0], [67.5, 663.0], [67.6, 663.0], [67.7, 669.0], [67.8, 669.0], [67.9, 673.0], [68.0, 673.0], [68.1, 674.0], [68.2, 674.0], [68.3, 678.0], [68.4, 678.0], [68.5, 680.0], [68.6, 680.0], [68.7, 683.0], [68.8, 683.0], [68.9, 684.0], [69.0, 684.0], [69.1, 685.0], [69.2, 685.0], [69.3, 687.0], [69.4, 687.0], [69.5, 687.0], [69.6, 687.0], [69.7, 691.0], [69.8, 691.0], [69.9, 697.0], [70.0, 697.0], [70.1, 697.0], [70.2, 697.0], [70.3, 699.0], [70.4, 699.0], [70.5, 701.0], [70.6, 701.0], [70.7, 707.0], [70.8, 707.0], [70.9, 709.0], [71.0, 709.0], [71.1, 713.0], [71.2, 713.0], [71.3, 716.0], [71.4, 716.0], [71.5, 717.0], [71.6, 717.0], [71.7, 720.0], [71.8, 720.0], [71.9, 720.0], [72.0, 720.0], [72.1, 728.0], [72.2, 728.0], [72.3, 738.0], [72.4, 738.0], [72.5, 739.0], [72.6, 739.0], [72.7, 744.0], [72.8, 744.0], [72.9, 744.0], [73.0, 744.0], [73.1, 752.0], [73.2, 752.0], [73.3, 753.0], [73.4, 753.0], [73.5, 754.0], [73.6, 754.0], [73.7, 763.0], [73.8, 763.0], [73.9, 766.0], [74.0, 766.0], [74.1, 766.0], [74.2, 766.0], [74.3, 772.0], [74.4, 772.0], [74.5, 782.0], [74.6, 782.0], [74.7, 785.0], [74.8, 785.0], [74.9, 795.0], [75.0, 795.0], [75.1, 799.0], [75.2, 799.0], [75.3, 800.0], [75.4, 800.0], [75.5, 801.0], [75.6, 801.0], [75.7, 803.0], [75.8, 803.0], [75.9, 803.0], [76.0, 803.0], [76.1, 805.0], [76.2, 805.0], [76.3, 807.0], [76.4, 807.0], [76.5, 815.0], [76.6, 815.0], [76.7, 821.0], [76.8, 821.0], [76.9, 823.0], [77.0, 823.0], [77.1, 828.0], [77.2, 828.0], [77.3, 837.0], [77.4, 837.0], [77.5, 846.0], [77.6, 846.0], [77.7, 852.0], [77.8, 852.0], [77.9, 854.0], [78.0, 854.0], [78.1, 862.0], [78.2, 862.0], [78.3, 865.0], [78.4, 865.0], [78.5, 867.0], [78.6, 867.0], [78.7, 875.0], [78.8, 875.0], [78.9, 876.0], [79.0, 876.0], [79.1, 876.0], [79.2, 876.0], [79.3, 880.0], [79.4, 880.0], [79.5, 882.0], [79.6, 882.0], [79.7, 914.0], [79.8, 914.0], [79.9, 921.0], [80.0, 921.0], [80.1, 925.0], [80.2, 925.0], [80.3, 943.0], [80.4, 943.0], [80.5, 943.0], [80.6, 943.0], [80.7, 946.0], [80.8, 946.0], [80.9, 950.0], [81.0, 950.0], [81.1, 950.0], [81.2, 950.0], [81.3, 950.0], [81.4, 950.0], [81.5, 951.0], [81.6, 951.0], [81.7, 958.0], [81.8, 958.0], [81.9, 968.0], [82.0, 968.0], [82.1, 977.0], [82.2, 977.0], [82.3, 980.0], [82.4, 980.0], [82.5, 1006.0], [82.6, 1006.0], [82.7, 1006.0], [82.8, 1006.0], [82.9, 1009.0], [83.0, 1009.0], [83.1, 1011.0], [83.2, 1011.0], [83.3, 1017.0], [83.4, 1017.0], [83.5, 1018.0], [83.6, 1018.0], [83.7, 1020.0], [83.8, 1020.0], [83.9, 1023.0], [84.0, 1023.0], [84.1, 1027.0], [84.2, 1027.0], [84.3, 1028.0], [84.4, 1028.0], [84.5, 1031.0], [84.6, 1031.0], [84.7, 1043.0], [84.8, 1043.0], [84.9, 1064.0], [85.0, 1064.0], [85.1, 1064.0], [85.2, 1064.0], [85.3, 1073.0], [85.4, 1073.0], [85.5, 1076.0], [85.6, 1076.0], [85.7, 1095.0], [85.8, 1095.0], [85.9, 1103.0], [86.0, 1103.0], [86.1, 1103.0], [86.2, 1103.0], [86.3, 1104.0], [86.4, 1104.0], [86.5, 1111.0], [86.6, 1111.0], [86.7, 1114.0], [86.8, 1114.0], [86.9, 1130.0], [87.0, 1130.0], [87.1, 1133.0], [87.2, 1133.0], [87.3, 1141.0], [87.4, 1141.0], [87.5, 1142.0], [87.6, 1142.0], [87.7, 1159.0], [87.8, 1159.0], [87.9, 1172.0], [88.0, 1172.0], [88.1, 1182.0], [88.2, 1182.0], [88.3, 1196.0], [88.4, 1196.0], [88.5, 1221.0], [88.6, 1221.0], [88.7, 1229.0], [88.8, 1229.0], [88.9, 1231.0], [89.0, 1231.0], [89.1, 1236.0], [89.2, 1236.0], [89.3, 1236.0], [89.4, 1236.0], [89.5, 1242.0], [89.6, 1242.0], [89.7, 1244.0], [89.8, 1244.0], [89.9, 1264.0], [90.0, 1264.0], [90.1, 1277.0], [90.2, 1277.0], [90.3, 1285.0], [90.4, 1285.0], [90.5, 1290.0], [90.6, 1290.0], [90.7, 1295.0], [90.8, 1295.0], [90.9, 1317.0], [91.0, 1317.0], [91.1, 1319.0], [91.2, 1319.0], [91.3, 1339.0], [91.4, 1339.0], [91.5, 1362.0], [91.6, 1362.0], [91.7, 1375.0], [91.8, 1375.0], [91.9, 1375.0], [92.0, 1375.0], [92.1, 1378.0], [92.2, 1378.0], [92.3, 1383.0], [92.4, 1383.0], [92.5, 1390.0], [92.6, 1390.0], [92.7, 1401.0], [92.8, 1401.0], [92.9, 1407.0], [93.0, 1407.0], [93.1, 1409.0], [93.2, 1409.0], [93.3, 1409.0], [93.4, 1409.0], [93.5, 1410.0], [93.6, 1410.0], [93.7, 1411.0], [93.8, 1411.0], [93.9, 1415.0], [94.0, 1415.0], [94.1, 1423.0], [94.2, 1423.0], [94.3, 1427.0], [94.4, 1427.0], [94.5, 1435.0], [94.6, 1435.0], [94.7, 1441.0], [94.8, 1441.0], [94.9, 1443.0], [95.0, 1443.0], [95.1, 1445.0], [95.2, 1445.0], [95.3, 1447.0], [95.4, 1447.0], [95.5, 1452.0], [95.6, 1452.0], [95.7, 1456.0], [95.8, 1456.0], [95.9, 1500.0], [96.0, 1500.0], [96.1, 1547.0], [96.2, 1547.0], [96.3, 1561.0], [96.4, 1561.0], [96.5, 1563.0], [96.6, 1563.0], [96.7, 1607.0], [96.8, 1607.0], [96.9, 1710.0], [97.0, 1710.0], [97.1, 1720.0], [97.2, 1720.0], [97.3, 1761.0], [97.4, 1761.0], [97.5, 1776.0], [97.6, 1776.0], [97.7, 1813.0], [97.8, 1813.0], [97.9, 1820.0], [98.0, 1820.0], [98.1, 1974.0], [98.2, 1974.0], [98.3, 2003.0], [98.4, 2003.0], [98.5, 2005.0], [98.6, 2005.0], [98.7, 2036.0], [98.8, 2036.0], [98.9, 2126.0], [99.0, 2126.0], [99.1, 2218.0], [99.2, 2218.0], [99.3, 2253.0], [99.4, 2253.0], [99.5, 2290.0], [99.6, 2290.0], [99.7, 2357.0], [99.8, 2357.0], [99.9, 3793.0], [100.0, 3793.0]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 8.0], [3.1, 8.0], [3.2, 30.0], [3.3, 30.0], [3.4, 30.0], [3.5, 31.0], [3.6, 31.0], [3.7, 32.0], [3.8, 32.0], [3.9, 46.0], [4.0, 46.0], [4.1, 48.0], [4.2, 48.0], [4.3, 60.0], [4.4, 60.0], [4.5, 62.0], [4.6, 62.0], [4.7, 69.0], [4.8, 69.0], [4.9, 75.0], [5.0, 75.0], [5.1, 81.0], [5.2, 81.0], [5.3, 86.0], [5.4, 86.0], [5.5, 90.0], [5.6, 90.0], [5.7, 90.0], [5.8, 90.0], [5.9, 90.0], [6.0, 90.0], [6.1, 91.0], [6.2, 91.0], [6.3, 93.0], [6.4, 93.0], [6.5, 95.0], [6.6, 95.0], [6.7, 95.0], [6.8, 95.0], [6.9, 95.0], [7.0, 95.0], [7.1, 95.0], [7.2, 95.0], [7.3, 95.0], [7.4, 95.0], [7.5, 99.0], [7.6, 99.0], [7.7, 100.0], [7.8, 100.0], [7.9, 100.0], [8.0, 100.0], [8.1, 101.0], [8.2, 101.0], [8.3, 101.0], [8.4, 101.0], [8.5, 102.0], [8.6, 102.0], [8.7, 104.0], [8.8, 105.0], [8.9, 105.0], [9.0, 106.0], [9.1, 106.0], [9.2, 106.0], [9.3, 106.0], [9.4, 106.0], [9.5, 106.0], [9.6, 107.0], [9.7, 107.0], [9.8, 107.0], [9.9, 107.0], [10.0, 108.0], [10.1, 108.0], [10.2, 108.0], [10.3, 108.0], [10.4, 109.0], [10.5, 109.0], [10.6, 110.0], [10.7, 110.0], [10.8, 114.0], [10.9, 114.0], [11.0, 117.0], [11.1, 117.0], [11.2, 118.0], [11.3, 118.0], [11.4, 118.0], [11.5, 118.0], [11.6, 118.0], [11.7, 118.0], [11.8, 119.0], [11.9, 119.0], [12.0, 120.0], [12.1, 120.0], [12.2, 121.0], [12.3, 121.0], [12.4, 122.0], [12.5, 122.0], [12.6, 123.0], [12.7, 123.0], [12.8, 124.0], [12.9, 124.0], [13.0, 126.0], [13.1, 126.0], [13.2, 126.0], [13.3, 126.0], [13.4, 129.0], [13.5, 129.0], [13.6, 131.0], [13.7, 131.0], [13.8, 134.0], [13.9, 134.0], [14.0, 134.0], [14.1, 134.0], [14.2, 139.0], [14.3, 139.0], [14.4, 139.0], [14.5, 139.0], [14.6, 140.0], [14.7, 140.0], [14.8, 141.0], [14.9, 141.0], [15.0, 142.0], [15.1, 142.0], [15.2, 143.0], [15.3, 143.0], [15.4, 144.0], [15.5, 144.0], [15.6, 145.0], [15.7, 145.0], [15.8, 145.0], [15.9, 145.0], [16.0, 151.0], [16.1, 151.0], [16.2, 151.0], [16.3, 151.0], [16.4, 152.0], [16.5, 152.0], [16.6, 153.0], [16.7, 153.0], [16.8, 154.0], [16.9, 154.0], [17.0, 154.0], [17.1, 154.0], [17.2, 155.0], [17.3, 155.0], [17.4, 158.0], [17.5, 158.0], [17.6, 158.0], [17.7, 158.0], [17.8, 159.0], [17.9, 159.0], [18.0, 160.0], [18.1, 160.0], [18.2, 161.0], [18.3, 161.0], [18.4, 161.0], [18.5, 161.0], [18.6, 163.0], [18.7, 163.0], [18.8, 163.0], [18.9, 163.0], [19.0, 164.0], [19.1, 164.0], [19.2, 165.0], [19.3, 165.0], [19.4, 166.0], [19.5, 166.0], [19.6, 167.0], [19.7, 167.0], [19.8, 167.0], [19.9, 167.0], [20.0, 167.0], [20.1, 167.0], [20.2, 169.0], [20.3, 169.0], [20.4, 169.0], [20.5, 169.0], [20.6, 169.0], [20.7, 169.0], [20.8, 171.0], [20.9, 171.0], [21.0, 175.0], [21.1, 175.0], [21.2, 175.0], [21.3, 175.0], [21.4, 175.0], [21.5, 175.0], [21.6, 176.0], [21.7, 176.0], [21.8, 176.0], [21.9, 176.0], [22.0, 177.0], [22.1, 177.0], [22.2, 178.0], [22.3, 178.0], [22.4, 178.0], [22.5, 178.0], [22.6, 178.0], [22.7, 178.0], [22.8, 179.0], [22.9, 179.0], [23.0, 179.0], [23.1, 179.0], [23.2, 180.0], [23.3, 180.0], [23.4, 181.0], [23.5, 181.0], [23.6, 183.0], [23.7, 183.0], [23.8, 183.0], [23.9, 183.0], [24.0, 184.0], [24.1, 184.0], [24.2, 186.0], [24.3, 186.0], [24.4, 186.0], [24.5, 186.0], [24.6, 187.0], [24.7, 187.0], [24.8, 189.0], [24.9, 189.0], [25.0, 189.0], [25.1, 189.0], [25.2, 190.0], [25.3, 190.0], [25.4, 191.0], [25.5, 191.0], [25.6, 194.0], [25.7, 194.0], [25.8, 194.0], [25.9, 194.0], [26.0, 196.0], [26.1, 196.0], [26.2, 197.0], [26.3, 197.0], [26.4, 197.0], [26.5, 197.0], [26.6, 197.0], [26.7, 197.0], [26.8, 199.0], [26.9, 199.0], [27.0, 199.0], [27.1, 199.0], [27.2, 200.0], [27.3, 200.0], [27.4, 201.0], [27.5, 201.0], [27.6, 201.0], [27.7, 201.0], [27.8, 202.0], [27.9, 202.0], [28.0, 202.0], [28.1, 202.0], [28.2, 208.0], [28.3, 208.0], [28.4, 210.0], [28.5, 210.0], [28.6, 211.0], [28.7, 211.0], [28.8, 212.0], [28.9, 212.0], [29.0, 214.0], [29.1, 214.0], [29.2, 214.0], [29.3, 214.0], [29.4, 216.0], [29.5, 216.0], [29.6, 218.0], [29.7, 218.0], [29.8, 223.0], [29.9, 223.0], [30.0, 226.0], [30.1, 226.0], [30.2, 227.0], [30.3, 227.0], [30.4, 228.0], [30.5, 228.0], [30.6, 228.0], [30.7, 228.0], [30.8, 229.0], [30.9, 229.0], [31.0, 230.0], [31.1, 230.0], [31.2, 233.0], [31.3, 233.0], [31.4, 234.0], [31.5, 234.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 234.0], [32.1, 234.0], [32.2, 235.0], [32.3, 235.0], [32.4, 236.0], [32.5, 236.0], [32.6, 236.0], [32.7, 236.0], [32.8, 240.0], [32.9, 240.0], [33.0, 240.0], [33.1, 240.0], [33.2, 242.0], [33.3, 242.0], [33.4, 242.0], [33.5, 242.0], [33.6, 244.0], [33.7, 244.0], [33.8, 245.0], [33.9, 245.0], [34.0, 245.0], [34.1, 245.0], [34.2, 247.0], [34.3, 247.0], [34.4, 247.0], [34.5, 247.0], [34.6, 249.0], [34.7, 249.0], [34.8, 249.0], [34.9, 249.0], [35.0, 249.0], [35.1, 249.0], [35.2, 249.0], [35.3, 249.0], [35.4, 250.0], [35.5, 250.0], [35.6, 251.0], [35.7, 251.0], [35.8, 253.0], [35.9, 253.0], [36.0, 255.0], [36.1, 255.0], [36.2, 256.0], [36.3, 256.0], [36.4, 256.0], [36.5, 256.0], [36.6, 258.0], [36.7, 258.0], [36.8, 259.0], [36.9, 259.0], [37.0, 261.0], [37.1, 261.0], [37.2, 261.0], [37.3, 261.0], [37.4, 262.0], [37.5, 262.0], [37.6, 263.0], [37.7, 263.0], [37.8, 265.0], [37.9, 265.0], [38.0, 269.0], [38.1, 269.0], [38.2, 270.0], [38.3, 270.0], [38.4, 272.0], [38.5, 272.0], [38.6, 274.0], [38.7, 274.0], [38.8, 275.0], [38.9, 275.0], [39.0, 282.0], [39.1, 282.0], [39.2, 282.0], [39.3, 282.0], [39.4, 288.0], [39.5, 288.0], [39.6, 288.0], [39.7, 288.0], [39.8, 290.0], [39.9, 290.0], [40.0, 290.0], [40.1, 290.0], [40.2, 293.0], [40.3, 293.0], [40.4, 297.0], [40.5, 297.0], [40.6, 297.0], [40.7, 297.0], [40.8, 299.0], [40.9, 299.0], [41.0, 304.0], [41.1, 304.0], [41.2, 308.0], [41.3, 308.0], [41.4, 310.0], [41.5, 310.0], [41.6, 311.0], [41.7, 311.0], [41.8, 312.0], [41.9, 312.0], [42.0, 312.0], [42.1, 312.0], [42.2, 319.0], [42.3, 319.0], [42.4, 327.0], [42.5, 327.0], [42.6, 328.0], [42.7, 328.0], [42.8, 328.0], [42.9, 331.0], [43.0, 331.0], [43.1, 331.0], [43.2, 334.0], [43.3, 334.0], [43.4, 334.0], [43.5, 335.0], [43.6, 335.0], [43.7, 339.0], [43.8, 339.0], [43.9, 342.0], [44.0, 342.0], [44.1, 343.0], [44.2, 343.0], [44.3, 346.0], [44.4, 346.0], [44.5, 350.0], [44.6, 350.0], [44.7, 354.0], [44.8, 354.0], [44.9, 354.0], [45.0, 354.0], [45.1, 361.0], [45.2, 361.0], [45.3, 362.0], [45.4, 362.0], [45.5, 364.0], [45.6, 364.0], [45.7, 364.0], [45.8, 364.0], [45.9, 364.0], [46.0, 364.0], [46.1, 365.0], [46.2, 365.0], [46.3, 367.0], [46.4, 367.0], [46.5, 370.0], [46.6, 370.0], [46.7, 371.0], [46.8, 371.0], [46.9, 373.0], [47.0, 373.0], [47.1, 374.0], [47.2, 374.0], [47.3, 374.0], [47.4, 374.0], [47.5, 377.0], [47.6, 377.0], [47.7, 377.0], [47.8, 377.0], [47.9, 381.0], [48.0, 381.0], [48.1, 387.0], [48.2, 387.0], [48.3, 390.0], [48.4, 390.0], [48.5, 393.0], [48.6, 393.0], [48.7, 393.0], [48.8, 393.0], [48.9, 396.0], [49.0, 396.0], [49.1, 396.0], [49.2, 396.0], [49.3, 398.0], [49.4, 398.0], [49.5, 398.0], [49.6, 398.0], [49.7, 399.0], [49.8, 399.0], [49.9, 402.0], [50.0, 402.0], [50.1, 403.0], [50.2, 403.0], [50.3, 403.0], [50.4, 403.0], [50.5, 403.0], [50.6, 403.0], [50.7, 405.0], [50.8, 405.0], [50.9, 407.0], [51.0, 407.0], [51.1, 408.0], [51.2, 408.0], [51.3, 412.0], [51.4, 412.0], [51.5, 414.0], [51.6, 414.0], [51.7, 415.0], [51.8, 415.0], [51.9, 416.0], [52.0, 416.0], [52.1, 417.0], [52.2, 417.0], [52.3, 421.0], [52.4, 421.0], [52.5, 421.0], [52.6, 421.0], [52.7, 424.0], [52.8, 424.0], [52.9, 425.0], [53.0, 425.0], [53.1, 425.0], [53.2, 425.0], [53.3, 426.0], [53.4, 426.0], [53.5, 427.0], [53.6, 427.0], [53.7, 429.0], [53.8, 429.0], [53.9, 430.0], [54.0, 430.0], [54.1, 432.0], [54.2, 432.0], [54.3, 432.0], [54.4, 432.0], [54.5, 432.0], [54.6, 432.0], [54.7, 436.0], [54.8, 436.0], [54.9, 440.0], [55.0, 440.0], [55.1, 441.0], [55.2, 441.0], [55.3, 441.0], [55.4, 441.0], [55.5, 444.0], [55.6, 444.0], [55.7, 445.0], [55.8, 445.0], [55.9, 445.0], [56.0, 445.0], [56.1, 445.0], [56.2, 445.0], [56.3, 445.0], [56.4, 445.0], [56.5, 446.0], [56.6, 446.0], [56.7, 450.0], [56.8, 450.0], [56.9, 450.0], [57.0, 450.0], [57.1, 452.0], [57.2, 452.0], [57.3, 452.0], [57.4, 452.0], [57.5, 453.0], [57.6, 453.0], [57.7, 453.0], [57.8, 453.0], [57.9, 453.0], [58.0, 453.0], [58.1, 454.0], [58.2, 454.0], [58.3, 454.0], [58.4, 454.0], [58.5, 455.0], [58.6, 455.0], [58.7, 455.0], [58.8, 455.0], [58.9, 455.0], [59.0, 455.0], [59.1, 455.0], [59.2, 455.0], [59.3, 458.0], [59.4, 458.0], [59.5, 460.0], [59.6, 460.0], [59.7, 460.0], [59.8, 460.0], [59.9, 463.0], [60.0, 463.0], [60.1, 466.0], [60.2, 466.0], [60.3, 467.0], [60.4, 467.0], [60.5, 467.0], [60.6, 467.0], [60.7, 469.0], [60.8, 469.0], [60.9, 469.0], [61.0, 469.0], [61.1, 475.0], [61.2, 475.0], [61.3, 480.0], [61.4, 480.0], [61.5, 481.0], [61.6, 481.0], [61.7, 485.0], [61.8, 485.0], [61.9, 487.0], [62.0, 487.0], [62.1, 487.0], [62.2, 487.0], [62.3, 487.0], [62.4, 487.0], [62.5, 488.0], [62.6, 488.0], [62.7, 489.0], [62.8, 489.0], [62.9, 489.0], [63.0, 489.0], [63.1, 489.0], [63.2, 489.0], [63.3, 489.0], [63.4, 489.0], [63.5, 490.0], [63.6, 490.0], [63.7, 495.0], [63.8, 495.0], [63.9, 496.0], [64.0, 496.0], [64.1, 505.0], [64.2, 505.0], [64.3, 506.0], [64.4, 506.0], [64.5, 506.0], [64.6, 506.0], [64.7, 508.0], [64.8, 508.0], [64.9, 508.0], [65.0, 508.0], [65.1, 511.0], [65.2, 511.0], [65.3, 513.0], [65.4, 513.0], [65.5, 515.0], [65.6, 515.0], [65.7, 524.0], [65.8, 524.0], [65.9, 524.0], [66.0, 524.0], [66.1, 527.0], [66.2, 527.0], [66.3, 527.0], [66.4, 527.0], [66.5, 527.0], [66.6, 527.0], [66.7, 527.0], [66.8, 527.0], [66.9, 528.0], [67.0, 528.0], [67.1, 528.0], [67.2, 528.0], [67.3, 537.0], [67.4, 537.0], [67.5, 538.0], [67.6, 538.0], [67.7, 538.0], [67.8, 538.0], [67.9, 542.0], [68.0, 542.0], [68.1, 547.0], [68.2, 547.0], [68.3, 551.0], [68.4, 551.0], [68.5, 552.0], [68.6, 552.0], [68.7, 555.0], [68.8, 555.0], [68.9, 562.0], [69.0, 562.0], [69.1, 563.0], [69.2, 563.0], [69.3, 568.0], [69.4, 568.0], [69.5, 569.0], [69.6, 569.0], [69.7, 570.0], [69.8, 570.0], [69.9, 575.0], [70.0, 575.0], [70.1, 577.0], [70.2, 577.0], [70.3, 580.0], [70.4, 580.0], [70.5, 581.0], [70.6, 581.0], [70.7, 581.0], [70.8, 581.0], [70.9, 586.0], [71.0, 586.0], [71.1, 588.0], [71.2, 588.0], [71.3, 588.0], [71.4, 588.0], [71.5, 594.0], [71.6, 594.0], [71.7, 596.0], [71.8, 596.0], [71.9, 598.0], [72.0, 598.0], [72.1, 608.0], [72.2, 608.0], [72.3, 609.0], [72.4, 609.0], [72.5, 614.0], [72.6, 614.0], [72.7, 616.0], [72.8, 616.0], [72.9, 617.0], [73.0, 617.0], [73.1, 621.0], [73.2, 621.0], [73.3, 626.0], [73.4, 626.0], [73.5, 626.0], [73.6, 626.0], [73.7, 627.0], [73.8, 627.0], [73.9, 634.0], [74.0, 634.0], [74.1, 634.0], [74.2, 634.0], [74.3, 637.0], [74.4, 637.0], [74.5, 638.0], [74.6, 638.0], [74.7, 639.0], [74.8, 639.0], [74.9, 639.0], [75.0, 639.0], [75.1, 639.0], [75.2, 639.0], [75.3, 640.0], [75.4, 640.0], [75.5, 643.0], [75.6, 643.0], [75.7, 647.0], [75.8, 647.0], [75.9, 661.0], [76.0, 661.0], [76.1, 666.0], [76.2, 666.0], [76.3, 668.0], [76.4, 668.0], [76.5, 669.0], [76.6, 669.0], [76.7, 672.0], [76.8, 672.0], [76.9, 673.0], [77.0, 673.0], [77.1, 676.0], [77.2, 676.0], [77.3, 678.0], [77.4, 678.0], [77.5, 679.0], [77.6, 679.0], [77.7, 682.0], [77.8, 682.0], [77.9, 685.0], [78.0, 685.0], [78.1, 688.0], [78.2, 688.0], [78.3, 691.0], [78.4, 691.0], [78.5, 691.0], [78.6, 691.0], [78.7, 693.0], [78.8, 693.0], [78.9, 696.0], [79.0, 696.0], [79.1, 697.0], [79.2, 697.0], [79.3, 698.0], [79.4, 698.0], [79.5, 701.0], [79.6, 701.0], [79.7, 705.0], [79.8, 705.0], [79.9, 716.0], [80.0, 716.0], [80.1, 733.0], [80.2, 733.0], [80.3, 735.0], [80.4, 735.0], [80.5, 736.0], [80.6, 736.0], [80.7, 738.0], [80.8, 738.0], [80.9, 739.0], [81.0, 739.0], [81.1, 741.0], [81.2, 741.0], [81.3, 742.0], [81.4, 742.0], [81.5, 751.0], [81.6, 751.0], [81.7, 751.0], [81.8, 751.0], [81.9, 752.0], [82.0, 752.0], [82.1, 753.0], [82.2, 753.0], [82.3, 755.0], [82.4, 755.0], [82.5, 757.0], [82.6, 757.0], [82.7, 760.0], [82.8, 760.0], [82.9, 765.0], [83.0, 765.0], [83.1, 778.0], [83.2, 778.0], [83.3, 790.0], [83.4, 790.0], [83.5, 793.0], [83.6, 793.0], [83.7, 820.0], [83.8, 820.0], [83.9, 832.0], [84.0, 832.0], [84.1, 835.0], [84.2, 835.0], [84.3, 856.0], [84.4, 856.0], [84.5, 865.0], [84.6, 865.0], [84.7, 889.0], [84.8, 889.0], [84.9, 890.0], [85.0, 890.0], [85.1, 897.0], [85.2, 897.0], [85.3, 908.0], [85.4, 908.0], [85.5, 936.0], [85.6, 936.0], [85.7, 940.0], [85.8, 940.0], [85.9, 945.0], [86.0, 945.0], [86.1, 955.0], [86.2, 955.0], [86.3, 956.0], [86.4, 956.0], [86.5, 958.0], [86.6, 958.0], [86.7, 961.0], [86.8, 961.0], [86.9, 962.0], [87.0, 962.0], [87.1, 967.0], [87.2, 967.0], [87.3, 969.0], [87.4, 969.0], [87.5, 977.0], [87.6, 977.0], [87.7, 996.0], [87.8, 996.0], [87.9, 1008.0], [88.0, 1008.0], [88.1, 1020.0], [88.2, 1020.0], [88.3, 1024.0], [88.4, 1024.0], [88.5, 1031.0], [88.6, 1031.0], [88.7, 1038.0], [88.8, 1038.0], [88.9, 1046.0], [89.0, 1046.0], [89.1, 1058.0], [89.2, 1058.0], [89.3, 1077.0], [89.4, 1077.0], [89.5, 1079.0], [89.6, 1079.0], [89.7, 1119.0], [89.8, 1119.0], [89.9, 1148.0], [90.0, 1148.0], [90.1, 1149.0], [90.2, 1149.0], [90.3, 1168.0], [90.4, 1168.0], [90.5, 1202.0], [90.6, 1202.0], [90.7, 1208.0], [90.8, 1208.0], [90.9, 1225.0], [91.0, 1225.0], [91.1, 1265.0], [91.2, 1265.0], [91.3, 1267.0], [91.4, 1267.0], [91.5, 1285.0], [91.6, 1285.0], [91.7, 1319.0], [91.8, 1319.0], [91.9, 1332.0], [92.0, 1332.0], [92.1, 1337.0], [92.2, 1337.0], [92.3, 1342.0], [92.4, 1342.0], [92.5, 1351.0], [92.6, 1351.0], [92.7, 1354.0], [92.8, 1354.0], [92.9, 1418.0], [93.0, 1418.0], [93.1, 1438.0], [93.2, 1438.0], [93.3, 1449.0], [93.4, 1449.0], [93.5, 1452.0], [93.6, 1452.0], [93.7, 1459.0], [93.8, 1459.0], [93.9, 1478.0], [94.0, 1478.0], [94.1, 1508.0], [94.2, 1508.0], [94.3, 1509.0], [94.4, 1509.0], [94.5, 1520.0], [94.6, 1520.0], [94.7, 1528.0], [94.8, 1528.0], [94.9, 1612.0], [95.0, 1612.0], [95.1, 1673.0], [95.2, 1673.0], [95.3, 1673.0], [95.4, 1673.0], [95.5, 1746.0], [95.6, 1746.0], [95.7, 1779.0], [95.8, 1779.0], [95.9, 1794.0], [96.0, 1794.0], [96.1, 1806.0], [96.2, 1806.0], [96.3, 1877.0], [96.4, 1877.0], [96.5, 2023.0], [96.6, 2023.0], [96.7, 2075.0], [96.8, 2075.0], [96.9, 2137.0], [97.0, 2137.0], [97.1, 2165.0], [97.2, 2165.0], [97.3, 2202.0], [97.4, 2202.0], [97.5, 2266.0], [97.6, 2266.0], [97.7, 2513.0], [97.8, 2513.0], [97.9, 2583.0], [98.0, 2583.0], [98.1, 2601.0], [98.2, 2601.0], [98.3, 2649.0], [98.4, 2649.0], [98.5, 2768.0], [98.6, 2768.0], [98.7, 2783.0], [98.8, 2783.0], [98.9, 2851.0], [99.0, 2851.0], [99.1, 2939.0], [99.2, 2939.0], [99.3, 2989.0], [99.4, 2989.0], [99.5, 3208.0], [99.6, 3208.0], [99.7, 5449.0], [99.8, 5449.0], [99.9, 8173.0], [100.0, 8173.0]], "isOverall": false, "label": "POST_Registro", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 98.0, "series": [{"data": [[1400.0, 3.0], [1500.0, 1.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 3.0], [2000.0, 8.0], [2100.0, 9.0], [2200.0, 9.0], [2300.0, 8.0], [2400.0, 11.0], [2500.0, 13.0], [2600.0, 14.0], [2700.0, 10.0], [2800.0, 11.0], [2900.0, 9.0], [3000.0, 9.0], [3100.0, 8.0], [3300.0, 10.0], [3200.0, 2.0], [3400.0, 14.0], [3500.0, 7.0], [3600.0, 7.0], [3700.0, 9.0], [3800.0, 6.0], [3900.0, 6.0], [4000.0, 10.0], [4100.0, 8.0], [4200.0, 4.0], [4300.0, 3.0], [4400.0, 7.0], [4500.0, 15.0], [4600.0, 11.0], [4800.0, 9.0], [4700.0, 5.0], [4900.0, 10.0], [5100.0, 10.0], [5000.0, 8.0], [5200.0, 11.0], [5300.0, 9.0], [5400.0, 7.0], [5500.0, 6.0], [5600.0, 4.0], [5700.0, 7.0], [5800.0, 7.0], [5900.0, 6.0], [6000.0, 10.0], [6100.0, 9.0], [6200.0, 11.0], [6300.0, 11.0], [6400.0, 9.0], [6500.0, 10.0], [6600.0, 7.0], [6700.0, 10.0], [6800.0, 3.0], [6900.0, 11.0], [7000.0, 6.0], [7100.0, 4.0], [7300.0, 7.0], [7200.0, 4.0], [7400.0, 5.0], [7500.0, 5.0], [7600.0, 7.0], [7700.0, 2.0], [7800.0, 3.0], [7900.0, 1.0], [8000.0, 1.0], [8300.0, 3.0], [8200.0, 1.0], [8600.0, 1.0], [9500.0, 1.0], [10200.0, 1.0]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[0.0, 3.0], [600.0, 46.0], [700.0, 24.0], [800.0, 22.0], [900.0, 14.0], [1000.0, 17.0], [1100.0, 13.0], [1200.0, 12.0], [1300.0, 9.0], [1400.0, 16.0], [1500.0, 4.0], [100.0, 38.0], [1600.0, 1.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 3.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 1.0], [200.0, 74.0], [3700.0, 1.0], [300.0, 48.0], [400.0, 92.0], [500.0, 51.0]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[0.0, 38.0], [600.0, 37.0], [700.0, 21.0], [800.0, 8.0], [900.0, 13.0], [1000.0, 9.0], [1100.0, 4.0], [1200.0, 6.0], [1300.0, 6.0], [1400.0, 6.0], [1500.0, 4.0], [100.0, 98.0], [1600.0, 3.0], [1700.0, 3.0], [1800.0, 2.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 2.0], [2500.0, 2.0], [2600.0, 2.0], [2800.0, 1.0], [2700.0, 2.0], [2900.0, 2.0], [200.0, 69.0], [3200.0, 1.0], [300.0, 44.0], [5400.0, 1.0], [400.0, 71.0], [500.0, 40.0], [8100.0, 1.0]], "isOverall": false, "label": "POST_Registro", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 556.0, "series": [{"data": [[0.0, 556.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 378.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 547.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 19.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.69337064E12, "maxY": 296.21977287909175, "series": [{"data": [[1.6933707E12, 1.3333333333333333], [1.69337064E12, 296.21977287909175]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6933707E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 10283.0, "series": [{"data": [[2.0, 10283.0], [3.0, 9547.0], [6.0, 8661.0], [46.0, 8339.333333333334], [49.0, 8311.0], [56.0, 8016.0], [66.0, 7677.0], [70.0, 7303.0], [68.0, 7356.0], [78.0, 7973.0], [82.0, 7527.333333333333], [81.0, 7533.0], [86.0, 7704.5], [85.0, 7413.8], [84.0, 7432.0], [90.0, 7430.5], [98.0, 7172.0], [118.0, 7674.0], [120.0, 7404.0], [125.0, 6986.0], [124.0, 7550.5], [131.0, 7557.0], [129.0, 7325.0], [128.0, 7291.333333333333], [143.0, 7155.0], [142.0, 7224.5], [149.0, 6936.0], [147.0, 6889.0], [145.0, 6726.0], [153.0, 6973.0], [166.0, 7291.0], [174.0, 7334.0], [181.0, 7039.333333333333], [180.0, 7004.0], [178.0, 6507.0], [191.0, 6530.4], [189.0, 6871.0], [188.0, 6677.0], [186.0, 6806.666666666667], [185.0, 6764.25], [184.0, 7173.0], [199.0, 6662.0], [198.0, 6389.666666666667], [196.0, 6452.0], [195.0, 6648.2], [194.0, 6439.0], [192.0, 6573.0], [207.0, 6422.5], [205.0, 6282.75], [204.0, 6296.0], [203.0, 6345.0], [202.0, 6458.8], [200.0, 6573.5], [214.0, 6613.5], [223.0, 6197.5], [222.0, 6431.0], [221.0, 6365.0], [220.0, 6692.0], [219.0, 6470.0], [218.0, 6593.0], [229.0, 6185.333333333333], [228.0, 5912.0], [227.0, 6202.5], [226.0, 6029.0], [224.0, 6224.0], [239.0, 5812.0], [238.0, 6305.0], [232.0, 6260.0], [246.0, 5906.0], [244.0, 6249.5], [242.0, 6001.666666666666], [240.0, 5962.0], [254.0, 6189.0], [253.0, 5817.0], [251.0, 5600.0], [264.0, 5798.0], [270.0, 5616.5], [258.0, 5870.666666666667], [257.0, 5596.0], [267.0, 5655.142857142857], [266.0, 6005.0], [265.0, 5382.0], [263.0, 5860.0], [262.0, 5865.0], [261.0, 5360.0], [260.0, 5804.0], [287.0, 5821.0], [285.0, 5560.0], [279.0, 5671.0], [278.0, 5284.666666666667], [275.0, 5399.0], [274.0, 5106.0], [272.0, 5910.0], [297.0, 4979.0], [295.0, 5619.0], [293.0, 5246.0], [291.0, 5339.0], [290.0, 5578.0], [289.0, 5053.0], [319.0, 4908.75], [317.0, 4976.0], [315.0, 5239.0], [313.0, 5072.0], [310.0, 5275.0], [307.0, 5192.25], [306.0, 5175.0], [332.0, 5173.0], [330.0, 4877.333333333333], [329.0, 4926.2], [328.0, 4853.166666666667], [327.0, 5263.0], [320.0, 4855.75], [325.0, 4739.0], [324.0, 4868.0], [323.0, 5168.0], [322.0, 4866.0], [351.0, 4784.25], [350.0, 4805.5], [346.0, 4769.0], [345.0, 4843.0], [338.0, 4456.5], [366.0, 4368.0], [365.0, 4544.0], [361.0, 4052.0], [360.0, 4614.0], [359.0, 4471.0], [354.0, 4460.0], [353.0, 4156.0], [352.0, 4491.5], [381.0, 4138.0], [379.0, 4249.0], [378.0, 4261.0], [377.0, 4295.5], [376.0, 4442.25], [374.0, 4689.0], [372.0, 4323.333333333333], [369.0, 4326.0], [396.0, 4003.5], [395.0, 3853.6666666666665], [393.0, 3865.0], [390.0, 4075.0], [387.0, 3884.0], [386.0, 4032.2], [384.0, 4514.0], [415.0, 3449.0], [413.0, 4174.0], [412.0, 3857.0], [408.0, 3405.0], [407.0, 3994.0], [406.0, 3445.0], [431.0, 3602.25], [430.0, 3651.75], [427.0, 3706.5], [426.0, 3494.5], [423.0, 3467.0], [422.0, 3558.25], [421.0, 3725.0], [419.0, 3834.0], [417.0, 3771.714285714286], [443.0, 2975.0], [442.0, 3379.0], [436.0, 3183.0], [435.0, 3047.0], [463.0, 3363.5], [462.0, 3127.0], [460.0, 2780.0], [459.0, 2928.0], [458.0, 3485.0], [456.0, 3532.5], [449.0, 3323.0], [448.0, 3742.0], [478.0, 2886.0], [477.0, 3107.0], [476.0, 3345.0], [475.0, 3195.3333333333335], [473.0, 3049.0], [471.0, 2611.0], [467.0, 3427.3333333333335], [466.0, 3029.0], [483.0, 2544.0], [494.0, 2571.666666666667], [492.0, 2940.0], [490.0, 2635.0], [489.0, 2917.0], [488.0, 2823.8333333333335], [487.0, 2539.0], [486.0, 2813.25], [485.0, 2613.6666666666665], [484.0, 2899.0], [482.0, 3011.0], [481.0, 2922.2], [480.0, 3343.0], [500.0, 2200.743243243242], [499.0, 2579.0], [498.0, 2868.0], [497.0, 2583.8888888888887], [496.0, 2793.5]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[338.1619999999996, 4659.185999999996]], "isOverall": false, "label": "GET_Registro-Aggregated", "isController": false}, {"data": [[2.0, 187.0], [3.0, 215.0], [4.0, 205.0], [5.0, 1427.0], [6.0, 1401.0], [8.0, 1412.5], [10.0, 780.5], [11.0, 1242.0], [13.0, 1367.5], [14.0, 1500.0], [16.0, 1350.0], [17.0, 1409.0], [18.0, 1409.0], [19.0, 1435.0], [20.0, 1390.0], [22.0, 1330.0], [23.0, 1375.0], [24.0, 925.0], [25.0, 1319.0], [26.0, 828.0], [27.0, 1415.0], [28.0, 1441.0], [29.0, 1317.0], [30.0, 1452.0], [31.0, 1264.0], [35.0, 496.0], [34.0, 1977.6666666666665], [37.0, 1111.0], [36.0, 1410.0], [39.0, 1073.0], [38.0, 1172.0], [41.0, 1114.0], [40.0, 1095.0], [43.0, 958.0], [42.0, 1974.0], [45.0, 875.0], [44.0, 782.0], [47.0, 482.0], [46.0, 1.0], [49.0, 1.0], [48.0, 548.0], [51.0, 578.0], [53.0, 2218.0], [52.0, 635.0], [55.0, 379.0], [54.0, 412.0], [57.0, 435.0], [56.0, 431.0], [59.0, 1076.0], [58.0, 539.0], [61.0, 457.0], [60.0, 526.0], [63.0, 1236.0], [62.0, 363.0], [67.0, 301.0], [66.0, 449.0], [65.0, 467.0], [64.0, 1141.0], [71.0, 263.0], [70.0, 1023.0], [69.0, 296.0], [68.0, 441.0], [75.0, 405.0], [74.0, 531.0], [73.0, 1017.0], [72.0, 532.0], [79.0, 398.0], [78.0, 2003.0], [77.0, 980.0], [76.0, 373.0], [83.0, 443.0], [82.0, 950.0], [81.0, 854.0], [80.0, 419.0], [87.0, 657.0], [86.0, 270.0], [85.0, 399.0], [84.0, 452.0], [91.0, 259.0], [90.0, 307.0], [89.0, 361.0], [88.0, 1043.0], [95.0, 292.0], [94.0, 296.0], [92.0, 302.0], [99.0, 446.0], [98.0, 262.0], [97.0, 745.0], [103.0, 304.0], [102.0, 257.0], [101.0, 186.0], [100.0, 538.0], [107.0, 610.0], [106.0, 235.0], [105.0, 210.0], [104.0, 1231.0], [111.0, 343.0], [110.0, 846.0], [109.0, 158.0], [108.0, 197.0], [115.0, 659.0], [114.0, 684.0], [113.0, 914.0], [112.0, 206.0], [119.0, 223.0], [118.0, 673.0], [117.0, 862.0], [116.0, 378.0], [123.0, 739.0], [122.0, 164.0], [121.0, 610.0], [120.0, 237.0], [127.0, 799.0], [126.0, 701.0], [125.0, 531.0], [124.0, 837.0], [135.0, 226.0], [134.0, 335.0], [133.0, 578.0], [132.0, 346.0], [131.0, 800.0], [130.0, 763.0], [129.0, 468.0], [128.0, 946.0], [143.0, 350.0], [142.0, 622.0], [141.0, 716.0], [140.0, 465.0], [139.0, 810.0], [137.0, 1006.0], [136.0, 611.0], [151.0, 368.0], [150.0, 463.0], [149.0, 292.0], [148.0, 2005.0], [147.0, 447.0], [146.0, 217.0], [145.0, 687.0], [144.0, 418.0], [159.0, 632.0], [158.0, 1027.0], [157.0, 1160.5], [155.0, 254.0], [154.0, 2357.0], [153.0, 276.0], [152.0, 278.0], [167.0, 453.0], [166.0, 228.0], [165.0, 354.0], [164.0, 685.0], [163.0, 795.0], [162.0, 154.0], [161.0, 514.0], [160.0, 281.0], [175.0, 678.0], [174.0, 951.0], [173.0, 338.0], [172.0, 1776.0], [171.0, 354.0], [170.0, 417.0], [169.0, 583.0], [168.0, 502.0], [183.0, 446.0], [182.0, 549.0], [181.0, 488.0], [180.0, 1407.0], [179.0, 476.0], [178.0, 595.0], [177.0, 1229.0], [176.0, 569.0], [191.0, 754.0], [190.0, 472.0], [189.0, 1443.0], [188.0, 683.0], [187.0, 621.0], [186.0, 1561.0], [185.0, 507.0], [184.0, 1285.0], [199.0, 429.0], [198.0, 539.0], [197.0, 697.0], [196.0, 1103.0], [195.0, 413.0], [194.0, 1137.5], [192.0, 943.0], [207.0, 510.0], [206.0, 405.0], [205.0, 1009.0], [204.0, 400.0], [203.0, 766.0], [202.0, 1761.0], [201.0, 968.0], [200.0, 538.0], [215.0, 240.0], [214.0, 508.0], [213.0, 333.0], [212.0, 1547.0], [211.0, 348.5], [209.0, 213.0], [208.0, 815.0], [223.0, 321.0], [222.0, 565.0], [221.0, 341.0], [220.0, 447.0], [219.0, 381.0], [218.0, 1064.0], [217.0, 196.0], [216.0, 343.0], [231.0, 414.0], [230.0, 173.0], [229.0, 248.0], [228.0, 448.0], [227.0, 372.0], [226.0, 465.0], [225.0, 1018.0], [224.0, 335.0], [239.0, 1103.0], [238.0, 450.0], [237.0, 249.0], [236.0, 204.0], [235.0, 251.0], [234.0, 669.0], [233.0, 658.0], [232.0, 179.0], [247.0, 1133.0], [246.0, 1011.0], [245.0, 1196.0], [244.0, 717.0], [243.0, 498.0], [242.0, 610.0], [241.0, 547.0], [240.0, 485.0], [255.0, 320.0], [254.0, 230.0], [253.0, 1182.0], [252.0, 220.0], [251.0, 880.0], [250.0, 2126.0], [249.0, 210.0], [248.0, 596.0], [270.0, 625.0], [271.0, 641.0], [269.0, 1064.0], [268.0, 766.0], [267.0, 772.0], [266.0, 589.0], [265.0, 852.0], [264.0, 2036.0], [263.0, 699.0], [257.0, 177.0], [256.0, 1295.0], [259.0, 199.0], [258.0, 571.0], [262.0, 1375.0], [261.0, 268.0], [260.0, 977.0], [286.0, 224.0], [287.0, 617.0], [285.0, 181.0], [284.0, 169.0], [283.0, 512.0], [282.0, 208.0], [281.0, 680.0], [280.0, 153.0], [279.0, 1820.0], [273.0, 331.0], [272.0, 337.0], [275.0, 579.0], [274.0, 607.0], [278.0, 227.5], [277.0, 267.0], [302.0, 432.0], [303.0, 510.0], [301.0, 538.0], [300.0, 205.0], [299.0, 639.0], [298.0, 364.0], [297.0, 172.0], [296.0, 388.0], [295.0, 564.0], [289.0, 402.0], [288.0, 509.0], [291.0, 620.0], [290.0, 1028.0], [294.0, 2290.0], [293.0, 434.0], [292.0, 512.0], [318.0, 605.0], [319.0, 950.0], [317.0, 640.0], [316.0, 823.0], [315.0, 407.0], [314.0, 1563.0], [313.0, 541.0], [312.0, 867.0], [311.0, 1006.0], [305.0, 1104.0], [304.0, 260.0], [307.0, 374.0], [306.0, 594.0], [310.0, 527.0], [309.0, 489.0], [308.0, 480.0], [334.0, 183.0], [335.0, 807.0], [333.0, 295.0], [332.0, 204.0], [331.0, 709.0], [330.0, 310.0], [329.0, 950.0], [328.0, 271.0], [327.0, 1720.0], [321.0, 438.0], [320.0, 1031.0], [323.0, 660.0], [322.0, 469.0], [326.0, 473.0], [325.0, 608.0], [324.0, 1159.0], [350.0, 139.0], [351.0, 674.0], [349.0, 283.0], [348.0, 154.0], [347.0, 527.0], [346.0, 300.0], [345.0, 458.0], [344.0, 452.0], [343.0, 720.0], [336.0, 159.0], [338.0, 255.0], [337.0, 227.0], [342.0, 287.0], [341.0, 162.0], [340.0, 179.0], [366.0, 491.0], [367.0, 1130.0], [365.0, 261.0], [364.0, 574.0], [363.0, 268.0], [362.0, 1607.0], [361.0, 312.0], [360.0, 414.0], [359.0, 425.0], [353.0, 2253.0], [352.0, 244.0], [355.0, 213.0], [354.0, 876.0], [358.0, 483.0], [357.0, 255.5], [382.0, 406.0], [383.0, 402.0], [381.0, 554.0], [371.0, 503.5], [369.0, 144.0], [368.0, 447.0], [379.0, 207.0], [378.0, 438.0], [377.0, 232.0], [376.0, 416.0], [375.0, 527.0], [374.0, 421.0], [373.0, 452.0], [372.0, 625.0], [398.0, 421.0], [399.0, 1221.0], [397.0, 691.0], [396.0, 528.0], [395.0, 1362.0], [394.0, 265.0], [393.0, 408.0], [392.0, 145.0], [391.0, 420.0], [384.0, 196.0], [387.0, 805.0], [386.0, 833.0], [390.0, 458.0], [389.0, 744.0], [388.0, 596.0], [413.0, 216.0], [415.0, 924.5], [412.0, 478.0], [403.0, 217.0], [402.0, 170.0], [401.0, 557.0], [400.0, 506.0], [411.0, 633.0], [410.0, 1142.0], [409.0, 943.0], [408.0, 803.0], [407.0, 1236.0], [406.0, 514.0], [405.0, 494.0], [404.0, 193.0], [430.0, 641.0], [431.0, 207.0], [429.0, 266.0], [428.0, 400.0], [427.0, 426.0], [426.0, 455.0], [425.0, 470.0], [424.0, 429.0], [423.0, 821.0], [417.0, 437.0], [416.0, 753.0], [419.0, 411.0], [418.0, 226.0], [422.0, 519.0], [421.0, 450.0], [420.0, 707.0], [446.0, 181.0], [447.0, 324.0], [445.0, 289.0], [444.0, 785.0], [443.0, 305.0], [442.0, 143.0], [441.0, 168.0], [440.0, 720.0], [439.0, 158.0], [433.0, 197.0], [432.0, 921.0], [435.0, 663.0], [434.0, 246.0], [438.0, 687.0], [436.0, 465.0], [462.0, 512.0], [463.0, 482.0], [461.0, 410.0], [460.0, 140.0], [459.0, 485.0], [458.0, 644.0], [457.0, 882.0], [456.0, 713.0], [455.0, 627.0], [449.0, 477.0], [448.0, 579.0], [451.0, 313.0], [450.0, 169.0], [454.0, 555.0], [453.0, 534.0], [452.0, 454.0], [478.0, 213.0], [479.0, 270.0], [477.0, 658.0], [476.0, 316.0], [475.0, 267.0], [474.0, 728.0], [473.0, 417.0], [472.0, 198.0], [471.0, 210.0], [465.0, 493.0], [464.0, 580.0], [467.0, 252.0], [466.0, 475.0], [470.0, 364.0], [469.0, 738.0], [468.0, 483.0], [494.0, 402.0], [495.0, 266.0], [492.0, 600.0], [483.0, 348.0], [482.0, 226.0], [481.0, 376.0], [480.0, 555.0], [491.0, 277.0], [490.0, 496.0], [489.0, 400.0], [488.0, 431.0], [487.0, 468.0], [486.0, 257.0], [485.0, 342.0], [484.0, 304.0], [500.0, 242.0], [499.0, 174.0], [498.0, 404.0], [497.0, 471.0], [496.0, 243.0], [1.0, 1.0]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[250.5500000000002, 626.5139999999999]], "isOverall": false, "label": "GET_Convocatoria-Aggregated", "isController": false}, {"data": [[2.0, 32.0], [3.0, 2.0], [5.0, 30.0], [35.0, 742.0], [45.0, 577.0], [46.0, 859.0], [49.0, 5449.0], [60.0, 95.0], [63.0, 124.0], [62.0, 105.0], [67.0, 1.0], [65.0, 102.0], [64.0, 97.0], [70.0, 1443.0], [78.0, 210.5], [77.0, 232.0], [83.0, 322.6], [82.0, 104.0], [81.0, 193.66666666666669], [80.0, 1478.0], [86.0, 214.5], [85.0, 230.5], [84.0, 69.0], [91.0, 1337.0], [88.0, 331.0], [94.0, 160.0], [93.0, 197.0], [103.0, 505.0], [102.0, 580.0], [106.0, 235.0], [105.0, 616.0], [109.0, 671.6666666666666], [114.0, 617.0], [122.0, 691.0], [126.0, 90.0], [125.0, 528.1428571428572], [124.0, 560.0], [128.0, 465.8], [143.0, 1351.0], [142.0, 208.0], [141.0, 201.0], [137.0, 614.0], [136.0, 1342.0], [151.0, 1713.0], [144.0, 658.0], [153.0, 507.6], [166.0, 455.0], [163.0, 426.0], [174.0, 1046.0], [172.0, 1208.0], [171.0, 187.0], [182.0, 1319.0], [181.0, 570.6666666666667], [180.0, 441.0], [179.0, 282.0], [178.0, 357.0], [177.0, 1265.0], [191.0, 808.4], [190.0, 395.3333333333333], [189.0, 236.0], [188.0, 252.25], [186.0, 335.0], [185.0, 2513.0], [184.0, 532.5], [199.0, 179.0], [198.0, 257.0], [196.0, 184.0], [195.0, 252.33333333333331], [194.0, 1124.0], [192.0, 1079.0], [207.0, 440.0], [206.0, 1509.0], [205.0, 483.125], [202.0, 364.0], [215.0, 453.0], [214.0, 478.66666666666663], [213.0, 454.0], [222.0, 645.0], [221.0, 1042.0], [219.0, 1508.0], [229.0, 1734.5], [227.0, 760.0], [226.0, 177.0], [224.0, 653.0], [239.0, 466.5], [238.0, 742.75], [236.0, 527.0], [232.0, 1168.0], [246.0, 415.2], [244.0, 569.6666666666666], [243.0, 647.0], [242.0, 488.0], [240.0, 489.0], [253.0, 323.5], [248.0, 186.0], [270.0, 197.0], [267.0, 639.0], [266.0, 889.6666666666667], [265.0, 547.0], [264.0, 1.0], [263.0, 952.75], [262.0, 535.0], [258.0, 832.0], [287.0, 570.0], [285.0, 467.0], [283.0, 506.5], [281.0, 511.0], [279.0, 626.0], [278.0, 178.0], [274.0, 126.0], [272.0, 638.0], [298.0, 393.0], [297.0, 627.0], [294.0, 417.0], [292.0, 2.0], [290.0, 1212.6666666666667], [319.0, 2023.0], [317.0, 373.0], [314.0, 1418.0], [313.0, 145.0], [312.0, 240.66666666666666], [310.0, 304.25], [308.0, 730.0], [307.0, 331.25], [306.0, 523.25], [334.0, 2583.0], [335.0, 129.5], [333.0, 1099.5], [332.0, 864.6666666666667], [331.0, 588.0], [330.0, 164.0], [329.0, 706.0], [328.0, 1187.0], [327.0, 551.5], [322.0, 158.5], [320.0, 361.0], [325.0, 635.75], [324.0, 256.5], [351.0, 189.0], [350.0, 813.0], [346.0, 416.0], [343.0, 2266.0], [342.0, 931.0], [341.0, 679.5], [336.0, 416.6666666666667], [366.0, 605.0], [365.0, 669.0], [362.0, 201.0], [361.0, 189.0], [359.0, 1038.0], [354.0, 1024.0], [353.0, 562.3333333333334], [352.0, 230.0], [383.0, 1008.0], [379.0, 404.5], [378.0, 490.0], [377.0, 563.0], [376.0, 452.6666666666667], [375.0, 1459.0], [372.0, 410.5], [369.0, 167.5], [398.0, 249.0], [399.0, 496.0], [397.0, 1058.0], [396.0, 400.8], [395.0, 795.3333333333334], [394.0, 1267.0], [393.0, 421.0], [392.0, 450.0], [388.0, 249.0], [386.0, 143.0], [384.0, 425.0], [403.0, 581.0], [413.0, 302.0], [415.0, 1202.0], [412.0, 171.0], [408.0, 249.0], [407.0, 175.0], [406.0, 493.5], [405.0, 639.0], [402.0, 240.0], [400.0, 405.0], [419.0, 403.5], [431.0, 100.0], [430.0, 382.0], [427.0, 1438.0], [426.0, 377.0], [424.0, 639.0], [423.0, 154.0], [422.0, 151.5], [421.0, 165.0], [418.0, 908.0], [417.0, 456.25], [416.0, 1512.0], [447.0, 487.0], [443.0, 226.0], [442.0, 489.0], [436.0, 668.0], [435.0, 178.0], [461.0, 180.0], [463.0, 321.3333333333333], [460.0, 599.5], [451.0, 626.5], [449.0, 481.0], [459.0, 702.5], [458.0, 392.6666666666667], [457.0, 958.0], [456.0, 332.0], [455.0, 108.0], [452.0, 962.0], [478.0, 245.0], [479.0, 218.0], [476.0, 234.0], [475.0, 430.0], [472.0, 290.0], [471.0, 245.0], [470.0, 121.0], [468.0, 626.0], [466.0, 405.16666666666663], [464.0, 432.0], [494.0, 347.90909090909093], [495.0, 275.0], [493.0, 354.0], [492.0, 398.0], [491.0, 282.0], [489.0, 698.0], [488.0, 530.6666666666666], [487.0, 520.0], [486.0, 282.0], [485.0, 532.5714285714286], [481.0, 441.0], [500.0, 274.00000000000006], [498.0, 475.0], [497.0, 299.7142857142857], [496.0, 544.5], [1.0, 8173.0]], "isOverall": false, "label": "POST_Registro", "isController": false}, {"data": [[298.17799999999977, 549.368]], "isOverall": false, "label": "POST_Registro-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 49.483333333333334, "minX": 1.69337064E12, "maxY": 1185218.65, "series": [{"data": [[1.6933707E12, 1544.4333333333334], [1.69337064E12, 1185218.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6933707E12, 49.483333333333334], [1.69337064E12, 25151.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6933707E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 94.0, "minX": 1.69337064E12, "maxY": 8173.0, "series": [{"data": [[1.69337064E12, 4659.185999999996]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[1.6933707E12, 94.0], [1.69337064E12, 628.652610441767]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[1.6933707E12, 8173.0], [1.69337064E12, 534.0901803607215]], "isOverall": false, "label": "POST_Registro", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6933707E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 93.5, "minX": 1.69337064E12, "maxY": 8172.0, "series": [{"data": [[1.69337064E12, 4414.386000000002]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[1.6933707E12, 93.5], [1.69337064E12, 597.116465863454]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[1.6933707E12, 8172.0], [1.69337064E12, 372.11422845691385]], "isOverall": false, "label": "POST_Registro", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6933707E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69337064E12, "maxY": 34.896, "series": [{"data": [[1.69337064E12, 34.896]], "isOverall": false, "label": "GET_Registro", "isController": false}, {"data": [[1.6933707E12, 0.0], [1.69337064E12, 4.389558232931724]], "isOverall": false, "label": "GET_Convocatoria", "isController": false}, {"data": [[1.6933707E12, 0.0], [1.69337064E12, 0.0]], "isOverall": false, "label": "POST_Registro", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6933707E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.69337064E12, "maxY": 10283.0, "series": [{"data": [[1.6933707E12, 8173.0], [1.69337064E12, 10283.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6933707E12, 8173.0], [1.69337064E12, 5910.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6933707E12, 8173.0], [1.69337064E12, 7696.800000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6933707E12, 8173.0], [1.69337064E12, 6740.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6933707E12, 187.0], [1.69337064E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6933707E12, 4180.0], [1.69337064E12, 720.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6933707E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 3.0, "maxY": 4180.0, "series": [{"data": [[292.0, 696.0], [163.0, 460.0], [45.0, 1319.0], [46.0, 2013.5], [6.0, 215.0], [3.0, 4180.0], [231.0, 685.0], [237.0, 691.0], [240.0, 807.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[292.0, 1.0], [163.0, 1.0], [6.0, 2.0], [3.0, 1.0], [237.0, 2.0], [240.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 292.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 4179.5, "series": [{"data": [[292.0, 614.0], [163.0, 443.0], [45.0, 1319.0], [46.0, 1992.0], [6.0, 214.0], [3.0, 4179.5], [231.0, 511.0], [237.0, 591.0], [240.0, 625.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[292.0, 0.0], [163.0, 0.0], [6.0, 0.0], [3.0, 0.0], [237.0, 0.0], [240.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 292.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69337064E12, "maxY": 24.983333333333334, "series": [{"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 24.983333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6933707E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69337064E12, "maxY": 24.65, "series": [{"data": [[1.6933707E12, 0.03333333333333333], [1.69337064E12, 24.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 0.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6933707E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69337064E12, "maxY": 8.333333333333334, "series": [{"data": [[1.69337064E12, 8.333333333333334]], "isOverall": false, "label": "GET_Registro-success", "isController": false}, {"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 8.05]], "isOverall": false, "label": "POST_Registro-success", "isController": false}, {"data": [[1.69337064E12, 0.26666666666666666]], "isOverall": false, "label": "POST_Registro-failure", "isController": false}, {"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 8.266666666666667]], "isOverall": false, "label": "GET_Convocatoria-success", "isController": false}, {"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 0.03333333333333333]], "isOverall": false, "label": "GET_Convocatoria-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6933707E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69337064E12, "maxY": 24.65, "series": [{"data": [[1.6933707E12, 0.03333333333333333], [1.69337064E12, 24.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6933707E12, 0.016666666666666666], [1.69337064E12, 0.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6933707E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

